from structures import *
from utils import *
from parse_asm import *
import time
import argparse


def arg_parser():
    '''
    Parse the arguments of the program
    Return:
        object containing the arguments
    '''
    parser = argparse.ArgumentParser()
    parser.add_argument('--asmfile', metavar='N', type=str, required=True,
                        help='Path to the .s asm files generated by objdump')
    parser.add_argument('--cfgfile', metavar='N', type=str, default='cfg.pickle',
                        help='Output file to store serialized CFG. Default is cfg.pickle')
    parser.add_argument('--arch', choices=SUPPORTED_ARCHITECTURES,help='Processor architecture.',
                        default='elf32-msp430')
    
    args = parser.parse_args()
    return args

def main():
    start = time.time()
    args = arg_parser()

    # Set arch if provided
    arch = set_arch(args.arch)

    # Parse asm file to python object
    lines = read_file(args.asmfile, arch.type)

    asm_func_file = args.cfgfile.replace("cfg", "asm_func")

    # Create the CFG from the asm file
    cfg, asm_funcs = create_cfg(arch, lines)

    stop = time.time()
    timingFile = open("./logs/timing.log", "w")
    print(f"\tBuild CFG: {1000*(stop-start)} ms", file=timingFile)
    timingFile.close()
    dataFile = open("./logs/timingdata.log", "a")
    dataFile.write(f'\n{1000*(stop-start)}, ')
    dataFile.close()

    debugFile = open("./logs/debug.log", "w")
    print("Nodes", file=debugFile)
    print("-------------------", file=debugFile)
    
    for node in cfg.nodes.keys():
        cfg.nodes[node].printNode(debugFile)
        print("", file=debugFile)
    print("-------------------", file=debugFile)
    print(f"Total Indr Calls: {len(cfg.indr_calls)}")
    
    if len(cfg.indr_calls) > 0:
        print("Indirect Calls:", file=debugFile)
        for addr in cfg.indr_calls:
            cfg.nodes[addr].printNode(debugFile)
        print("-------------------", file=debugFile)
        print("", file=debugFile)

    print(f"Total Indr Jumps: {len(cfg.indr_jumps)}")
    if len(cfg.indr_jumps) > 0:
        print("Indirect Jumps:", file=debugFile)
        for addr in cfg.indr_jumps:
            cfg.nodes[addr].printNode(debugFile)
        print("-------------------", file=debugFile)
        print("", file=debugFile)
    
    
    if len(cfg.func_nodes.keys()) > 0:
        print(f"Func nodes: {len(cfg.func_nodes.keys())}")
        for key in cfg.func_nodes.keys():
            print(f"{key}: {cfg.func_nodes[addr]}")
        print("-------------------", file=debugFile)
        print("", file=debugFile)
    debugFile.close()

    # Serialize cfg to output file
    dump(cfg,args.cfgfile)
    dump(asm_funcs,asm_func_file)


if __name__ == "__main__":
    main()