
TRACES_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001570  080401f8  080401f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08041768  08041768  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08041768  08041768  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  08041768  08041768  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  08041768  08041768  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08041768  08041768  00011768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804176c  0804176c  0001176c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .empty        00000204  08060000  08060000  00020000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .data         00000010  20018000  08041770  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000430  20018010  08041780  00018010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20018440  08041780  00018440  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .comment      00000081  00000000  00000000  0002023a  2**0
                  CONTENTS, READONLY
 14 .debug_line   00004fbf  00000000  00000000  000202bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00003c4b  00000000  00000000  0002527a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000e0d  00000000  00000000  00028ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000468  00000000  00000000  00029cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe930  00000000  00000000  0002a140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000003c8  00000000  00000000  00128a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000272c6  00000000  00000000  00128e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000db0  00000000  00000000  00150100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	; (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	; (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	; (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	e000      	b.n	804020a <__do_global_dtors_aux+0x12>
 8040208:	bf00      	nop
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	20018010 	.word	0x20018010
 8040214:	00000000 	.word	0x00000000
 8040218:	080416cc 	.word	0x080416cc

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	; (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	; (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	; (8040234 <frame_dummy+0x18>)
 8040226:	e000      	b.n	804022a <frame_dummy+0xe>
 8040228:	bf00      	nop
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	20018014 	.word	0x20018014
 8040234:	080416cc 	.word	0x080416cc

08040238 <safeFunction>:
	.type	safeFunction, %function
safeFunction:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	@ link register save eliminated.
	push	{r7, lr}
 8040238:	b580      	push	{r7, lr}
	add	r7, sp, #0
 804023a:	af00      	add	r7, sp, #0
	ldr	r3, .L2
 804023c:	4b03      	ldr	r3, [pc, #12]	; (804024c <safeFunction+0x14>)
	movs	r2, #1
 804023e:	2201      	movs	r2, #1
	str	r2, [r3]
 8040240:	601a      	str	r2, [r3, #0]
	mov	sp, r7
 8040242:	46bd      	mov	sp, r7
	@ sp needed
	pop	{r7, lr}
 8040244:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	b	SECURE_log_ret
 8040248:	f001 ba7e 	b.w	8041748 <__SECURE_log_ret_veneer>
 804024c:	2001802c 	.word	0x2001802c

08040250 <my_memcpy>:
	.type	my_memcpy, %function
my_memcpy:
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 1, uses_anonymous_args = 0
	@ link register save eliminated.
	push	{r7, lr}
 8040250:	b580      	push	{r7, lr}
	sub	sp, sp, #28
 8040252:	b087      	sub	sp, #28
	add	r7, sp, #0
 8040254:	af00      	add	r7, sp, #0
	str	r0, [r7, #12]
 8040256:	60f8      	str	r0, [r7, #12]
	str	r1, [r7, #8]
 8040258:	60b9      	str	r1, [r7, #8]
	str	r2, [r7, #4]
 804025a:	607a      	str	r2, [r7, #4]
	movs	r3, #0
 804025c:	2300      	movs	r3, #0
	str	r3, [r7, #20]
 804025e:	617b      	str	r3, [r7, #20]
	b	.L5
 8040260:	e00c      	b.n	804027c <my_memcpy+0x2c>
.L6:
	bl	SECURE_log_cond_br_taken
 8040262:	f001 fa79 	bl	8041758 <__SECURE_log_cond_br_taken_veneer>
	ldr	r2, [r7, #12]
 8040266:	68fa      	ldr	r2, [r7, #12]
	ldr	r3, [r7, #20]
 8040268:	697b      	ldr	r3, [r7, #20]
	add	r3, r3, r2
 804026a:	4413      	add	r3, r2
	ldr	r1, [r7, #8]
 804026c:	68b9      	ldr	r1, [r7, #8]
	ldr	r2, [r7, #20]
 804026e:	697a      	ldr	r2, [r7, #20]
	add	r2, r2, r1
 8040270:	440a      	add	r2, r1
	ldrb	r2, [r2]	@ zero_extendqisi2
 8040272:	7812      	ldrb	r2, [r2, #0]
	strb	r2, [r3]
 8040274:	701a      	strb	r2, [r3, #0]
	ldr	r3, [r7, #20]
 8040276:	697b      	ldr	r3, [r7, #20]
	adds	r3, r3, #1
 8040278:	3301      	adds	r3, #1
	str	r3, [r7, #20]
 804027a:	617b      	str	r3, [r7, #20]
.L5:
	ldr	r2, [r7, #20]
 804027c:	697a      	ldr	r2, [r7, #20]
	ldr	r3, [r7, #4]
 804027e:	687b      	ldr	r3, [r7, #4]
	cmp	r2, r3
 8040280:	429a      	cmp	r2, r3
	bcc	.L6
 8040282:	d3ee      	bcc.n	8040262 <my_memcpy+0x12>
	bl	SECURE_log_cond_br_not_taken
 8040284:	f001 fa40 	bl	8041708 <__SECURE_log_cond_br_not_taken_veneer>
	adds	r7, r7, #28
 8040288:	371c      	adds	r7, #28
	mov	sp, r7
 804028a:	46bd      	mov	sp, r7
	@ sp needed
	pop	{r7, lr}
 804028c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	b	SECURE_log_ret
 8040290:	f001 ba5a 	b.w	8041748 <__SECURE_log_ret_veneer>

08040294 <malloc>:
	.type	malloc, %function
malloc:
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 1, uses_anonymous_args = 0
	@ link register save eliminated.
	push	{r7, lr}
 8040294:	b580      	push	{r7, lr}
	sub	sp, sp, #20
 8040296:	b085      	sub	sp, #20
	add	r7, sp, #0
 8040298:	af00      	add	r7, sp, #0
	str	r0, [r7, #4]
 804029a:	6078      	str	r0, [r7, #4]
	ldr	r3, [r7, #4]
 804029c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #3
 804029e:	3303      	adds	r3, #3
	bic	r3, r3, #3
 80402a0:	f023 0303 	bic.w	r3, r3, #3
	str	r3, [r7, #4]
 80402a4:	607b      	str	r3, [r7, #4]
	ldr	r3, [r7, #4]
 80402a6:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #8
 80402a8:	3308      	adds	r3, #8
	str	r3, [r7, #4]
 80402aa:	607b      	str	r3, [r7, #4]
	movs	r3, #0
 80402ac:	2300      	movs	r3, #0
	str	r3, [r7, #12]
 80402ae:	60fb      	str	r3, [r7, #12]
	b	.L8
 80402b0:	e035      	b.n	804031e <malloc+0x8a>
.L12:
	bl	SECURE_log_cond_br_taken
 80402b2:	f001 fa51 	bl	8041758 <__SECURE_log_cond_br_taken_veneer>
	ldr	r3, [r7, #12]
 80402b6:	68fb      	ldr	r3, [r7, #12]
	ldr	r2, .L13
 80402b8:	4a20      	ldr	r2, [pc, #128]	; (804033c <malloc+0xa8>)
	add	r3, r3, r2
 80402ba:	4413      	add	r3, r2
	str	r3, [r7, #8]
 80402bc:	60bb      	str	r3, [r7, #8]
	ldr	r3, [r7, #8]
 80402be:	68bb      	ldr	r3, [r7, #8]
	ldr	r3, [r3, #4]
 80402c0:	685b      	ldr	r3, [r3, #4]
	cmp	r3, #0
 80402c2:	2b00      	cmp	r3, #0
	beq	.L243
 80402c4:	d00e      	beq.n	80402e4 <malloc+0x50>
	bl	SECURE_log_cond_br_not_taken
 80402c6:	f001 fa1f 	bl	8041708 <__SECURE_log_cond_br_not_taken_veneer>
	ldr	r3, [r7, #8]
 80402ca:	68bb      	ldr	r3, [r7, #8]
	ldr	r2, [r3]
 80402cc:	681a      	ldr	r2, [r3, #0]
	ldr	r3, [r7, #4]
 80402ce:	687b      	ldr	r3, [r7, #4]
	cmp	r2, r3
 80402d0:	429a      	cmp	r2, r3
	bcc	.L243
 80402d2:	d307      	bcc.n	80402e4 <malloc+0x50>
	bl	SECURE_log_cond_br_not_taken
 80402d4:	f001 fa18 	bl	8041708 <__SECURE_log_cond_br_not_taken_veneer>
	ldr	r3, [r7, #8]
 80402d8:	68bb      	ldr	r3, [r7, #8]
	movs	r2, #0
 80402da:	2200      	movs	r2, #0
	str	r2, [r3, #4]
 80402dc:	605a      	str	r2, [r3, #4]
	ldr	r3, [r7, #8]
 80402de:	68bb      	ldr	r3, [r7, #8]
	adds	r3, r3, #8
 80402e0:	3308      	adds	r3, #8
	b	.L10
 80402e2:	e024      	b.n	804032e <malloc+0x9a>
.L243:
	bl	SECURE_log_cond_br_taken
 80402e4:	f001 fa38 	bl	8041758 <__SECURE_log_cond_br_taken_veneer>
.L9:
	ldr	r3, [r7, #8]
 80402e8:	68bb      	ldr	r3, [r7, #8]
	ldr	r3, [r3]
 80402ea:	681b      	ldr	r3, [r3, #0]
	cmp	r3, #0
 80402ec:	2b00      	cmp	r3, #0
	bne	.L244
 80402ee:	d10f      	bne.n	8040310 <malloc+0x7c>
	bl	SECURE_log_cond_br_not_taken
 80402f0:	f001 fa0a 	bl	8041708 <__SECURE_log_cond_br_not_taken_veneer>
	ldr	r3, [r7, #8]
 80402f4:	68bb      	ldr	r3, [r7, #8]
	ldr	r2, [r7, #4]
 80402f6:	687a      	ldr	r2, [r7, #4]
	str	r2, [r3]
 80402f8:	601a      	str	r2, [r3, #0]
	ldr	r3, [r7, #8]
 80402fa:	68bb      	ldr	r3, [r7, #8]
	movs	r2, #0
 80402fc:	2200      	movs	r2, #0
	str	r2, [r3, #4]
 80402fe:	605a      	str	r2, [r3, #4]
	ldr	r2, [r7, #12]
 8040300:	68fa      	ldr	r2, [r7, #12]
	ldr	r3, [r7, #4]
 8040302:	687b      	ldr	r3, [r7, #4]
	add	r3, r3, r2
 8040304:	4413      	add	r3, r2
	ldr	r2, .L13+4
 8040306:	4a0e      	ldr	r2, [pc, #56]	; (8040340 <malloc+0xac>)
	str	r3, [r2]
 8040308:	6013      	str	r3, [r2, #0]
	ldr	r3, [r7, #8]
 804030a:	68bb      	ldr	r3, [r7, #8]
	adds	r3, r3, #8
 804030c:	3308      	adds	r3, #8
	b	.L10
 804030e:	e00e      	b.n	804032e <malloc+0x9a>
.L244:
	bl	SECURE_log_cond_br_taken
 8040310:	f001 fa22 	bl	8041758 <__SECURE_log_cond_br_taken_veneer>
.L11:
	ldr	r3, [r7, #8]
 8040314:	68bb      	ldr	r3, [r7, #8]
	ldr	r3, [r3]
 8040316:	681b      	ldr	r3, [r3, #0]
	ldr	r2, [r7, #12]
 8040318:	68fa      	ldr	r2, [r7, #12]
	add	r3, r3, r2
 804031a:	4413      	add	r3, r2
	str	r3, [r7, #12]
 804031c:	60fb      	str	r3, [r7, #12]
.L8:
	ldr	r3, [r7, #12]
 804031e:	68fb      	ldr	r3, [r7, #12]
	adds	r3, r3, #8
 8040320:	3308      	adds	r3, #8
	cmp	r3, #1024
 8040322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
	bls	.L12
 8040326:	d9c4      	bls.n	80402b2 <malloc+0x1e>
	bl	SECURE_log_cond_br_not_taken
 8040328:	f001 f9ee 	bl	8041708 <__SECURE_log_cond_br_not_taken_veneer>
	movs	r3, #0
 804032c:	2300      	movs	r3, #0
.L10:
	mov	r0, r3
 804032e:	4618      	mov	r0, r3
	adds	r7, r7, #20
 8040330:	3714      	adds	r7, #20
	mov	sp, r7
 8040332:	46bd      	mov	sp, r7
	@ sp needed
	pop	{r7, lr}
 8040334:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	b	SECURE_log_ret
 8040338:	f001 ba06 	b.w	8041748 <__SECURE_log_ret_veneer>
 804033c:	20018030 	.word	0x20018030
 8040340:	20018430 	.word	0x20018430

08040344 <free>:
	.type	free, %function
free:
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 1, uses_anonymous_args = 0
	@ link register save eliminated.
	push	{r7, lr}
 8040344:	b580      	push	{r7, lr}
	sub	sp, sp, #20
 8040346:	b085      	sub	sp, #20
	add	r7, sp, #0
 8040348:	af00      	add	r7, sp, #0
	str	r0, [r7, #4]
 804034a:	6078      	str	r0, [r7, #4]
	ldr	r3, [r7, #4]
 804034c:	687b      	ldr	r3, [r7, #4]
	cmp	r3, #0
 804034e:	2b00      	cmp	r3, #0
	beq	.L245
 8040350:	d014      	beq.n	804037c <free+0x38>
	bl	SECURE_log_cond_br_not_taken
 8040352:	f001 f9d9 	bl	8041708 <__SECURE_log_cond_br_not_taken_veneer>
	ldr	r3, [r7, #4]
 8040356:	687b      	ldr	r3, [r7, #4]
	ldr	r2, .L20
 8040358:	4a0c      	ldr	r2, [pc, #48]	; (804038c <free+0x48>)
	cmp	r3, r2
 804035a:	4293      	cmp	r3, r2
	bcc	.L245
 804035c:	d30e      	bcc.n	804037c <free+0x38>
	bl	SECURE_log_cond_br_not_taken
 804035e:	f001 f9d3 	bl	8041708 <__SECURE_log_cond_br_not_taken_veneer>
	ldr	r2, .L20+4
 8040362:	4a0b      	ldr	r2, [pc, #44]	; (8040390 <free+0x4c>)
	ldr	r3, [r7, #4]
 8040364:	687b      	ldr	r3, [r7, #4]
	cmp	r3, r2
 8040366:	4293      	cmp	r3, r2
	bcs	.L245
 8040368:	d208      	bcs.n	804037c <free+0x38>
	bl	SECURE_log_cond_br_not_taken
 804036a:	f001 f9cd 	bl	8041708 <__SECURE_log_cond_br_not_taken_veneer>
	ldr	r3, [r7, #4]
 804036e:	687b      	ldr	r3, [r7, #4]
	subs	r3, r3, #8
 8040370:	3b08      	subs	r3, #8
	str	r3, [r7, #12]
 8040372:	60fb      	str	r3, [r7, #12]
	ldr	r3, [r7, #12]
 8040374:	68fb      	ldr	r3, [r7, #12]
	movs	r2, #1
 8040376:	2201      	movs	r2, #1
	str	r2, [r3, #4]
 8040378:	605a      	str	r2, [r3, #4]
	b	.L15
 804037a:	e001      	b.n	8040380 <free+0x3c>
.L245:
	bl	SECURE_log_cond_br_taken
 804037c:	f001 f9ec 	bl	8041758 <__SECURE_log_cond_br_taken_veneer>
.L19:
.L15:
	adds	r7, r7, #20
 8040380:	3714      	adds	r7, #20
	mov	sp, r7
 8040382:	46bd      	mov	sp, r7
	@ sp needed
	pop	{r7, lr}
 8040384:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	b	SECURE_log_ret
 8040388:	f001 b9de 	b.w	8041748 <__SECURE_log_ret_veneer>
 804038c:	20018030 	.word	0x20018030
 8040390:	20018430 	.word	0x20018430

08040394 <swi120>:
	.fpu fpv5-sp-d16
	.type	swi120, %function
swi120:
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{r7, lr}
 8040394:	b580      	push	{r7, lr}
	sub	sp, sp, #32
 8040396:	b088      	sub	sp, #32
	add	r7, sp, #0
 8040398:	af00      	add	r7, sp, #0
	str	r0, [r7, #4]
 804039a:	6078      	str	r0, [r7, #4]
	movs	r0, #8
 804039c:	2008      	movs	r0, #8
	bl	malloc
 804039e:	f7ff ff79 	bl	8040294 <malloc>
	mov	r3, r0
 80403a2:	4603      	mov	r3, r0
	str	r3, [r7, #24]
 80403a4:	61bb      	str	r3, [r7, #24]
	ldr	r3, [r7, #24]
 80403a6:	69bb      	ldr	r3, [r7, #24]
	ldr	r2, .L149
 80403a8:	4ac9      	ldr	r2, [pc, #804]	; (80406d0 <swi120+0x33c>)
	str	r2, [r3]
 80403aa:	601a      	str	r2, [r3, #0]
	ldr	r3, [r7, #24]
 80403ac:	69bb      	ldr	r3, [r7, #24]
	movs	r2, #0
 80403ae:	2200      	movs	r2, #0
	str	r2, [r3, #4]
 80403b0:	605a      	str	r2, [r3, #4]
	ldr	r0, [r7, #24]
 80403b2:	69b8      	ldr	r0, [r7, #24]
	bl	free
 80403b4:	f7ff ffc6 	bl	8040344 <free>
	movs	r0, #8
 80403b8:	2008      	movs	r0, #8
	bl	malloc
 80403ba:	f7ff ff6b 	bl	8040294 <malloc>
	mov	r3, r0
 80403be:	4603      	mov	r3, r0
	str	r3, [r7, #20]
 80403c0:	617b      	str	r3, [r7, #20]
	ldr	r3, .L149+4
 80403c2:	4bc4      	ldr	r3, [pc, #784]	; (80406d4 <swi120+0x340>)
	str	r3, [r7, #12]
 80403c4:	60fb      	str	r3, [r7, #12]
	ldr	r3, .L149+8
 80403c6:	4bc4      	ldr	r3, [pc, #784]	; (80406d8 <swi120+0x344>)
	str	r3, [r7, #16]
 80403c8:	613b      	str	r3, [r7, #16]
	add	r3, r7, #12
 80403ca:	f107 030c 	add.w	r3, r7, #12
	movs	r2, #8
 80403ce:	2208      	movs	r2, #8
	mov	r1, r3
 80403d0:	4619      	mov	r1, r3
	ldr	r0, [r7, #20]
 80403d2:	6978      	ldr	r0, [r7, #20]
	bl	my_memcpy
 80403d4:	f7ff ff3c 	bl	8040250 <my_memcpy>
	movs	r3, #0
 80403d8:	2300      	movs	r3, #0
	str	r3, [r7, #28]
 80403da:	61fb      	str	r3, [r7, #28]
	b	.L23
 80403dc:	e2ea      	b.n	80409b4 <swi120+0x620>
.L147:
	bl	SECURE_log_cond_br_taken
 80403de:	f001 f9bb 	bl	8041758 <__SECURE_log_cond_br_taken_veneer>
	ldr	r3, [r7, #28]
 80403e2:	69fb      	ldr	r3, [r7, #28]
	cmp	r3, #119
 80403e4:	2b77      	cmp	r3, #119	; 0x77
	bhi	.L246
 80403e6:	f200 82dd 	bhi.w	80409a4 <swi120+0x610>
	bl	SECURE_log_cond_br_not_taken
 80403ea:	f001 f98d 	bl	8041708 <__SECURE_log_cond_br_not_taken_veneer>
	adr	r2, .L26
 80403ee:	a202      	add	r2, pc, #8	; (adr r2, 80403f8 <swi120+0x64>)
	ldr	r10, [r2, r3, lsl #2]
 80403f0:	f852 a023 	ldr.w	sl, [r2, r3, lsl #2]
	b	SECURE_log_indr_fwd
 80403f4:	f001 b9a0 	b.w	8041738 <__SECURE_log_indr_fwd_veneer>
 80403f8:	080405d9 	.word	0x080405d9
 80403fc:	080405e1 	.word	0x080405e1
 8040400:	080405e9 	.word	0x080405e9
 8040404:	080405f1 	.word	0x080405f1
 8040408:	080405f9 	.word	0x080405f9
 804040c:	08040601 	.word	0x08040601
 8040410:	08040609 	.word	0x08040609
 8040414:	08040611 	.word	0x08040611
 8040418:	08040619 	.word	0x08040619
 804041c:	08040621 	.word	0x08040621
 8040420:	08040629 	.word	0x08040629
 8040424:	08040631 	.word	0x08040631
 8040428:	08040639 	.word	0x08040639
 804042c:	08040641 	.word	0x08040641
 8040430:	08040649 	.word	0x08040649
 8040434:	08040651 	.word	0x08040651
 8040438:	08040659 	.word	0x08040659
 804043c:	08040661 	.word	0x08040661
 8040440:	08040669 	.word	0x08040669
 8040444:	08040671 	.word	0x08040671
 8040448:	08040679 	.word	0x08040679
 804044c:	08040681 	.word	0x08040681
 8040450:	08040689 	.word	0x08040689
 8040454:	08040691 	.word	0x08040691
 8040458:	08040699 	.word	0x08040699
 804045c:	080406a1 	.word	0x080406a1
 8040460:	080406a9 	.word	0x080406a9
 8040464:	080406b1 	.word	0x080406b1
 8040468:	080406b9 	.word	0x080406b9
 804046c:	080406c1 	.word	0x080406c1
 8040470:	080406c9 	.word	0x080406c9
 8040474:	080406dd 	.word	0x080406dd
 8040478:	080406e5 	.word	0x080406e5
 804047c:	080406ed 	.word	0x080406ed
 8040480:	080406f5 	.word	0x080406f5
 8040484:	080406fd 	.word	0x080406fd
 8040488:	08040705 	.word	0x08040705
 804048c:	0804070d 	.word	0x0804070d
 8040490:	08040715 	.word	0x08040715
 8040494:	0804071d 	.word	0x0804071d
 8040498:	08040725 	.word	0x08040725
 804049c:	0804072d 	.word	0x0804072d
 80404a0:	08040735 	.word	0x08040735
 80404a4:	0804073d 	.word	0x0804073d
 80404a8:	08040745 	.word	0x08040745
 80404ac:	0804074d 	.word	0x0804074d
 80404b0:	08040755 	.word	0x08040755
 80404b4:	0804075d 	.word	0x0804075d
 80404b8:	08040765 	.word	0x08040765
 80404bc:	0804076d 	.word	0x0804076d
 80404c0:	08040775 	.word	0x08040775
 80404c4:	0804077d 	.word	0x0804077d
 80404c8:	08040785 	.word	0x08040785
 80404cc:	0804078d 	.word	0x0804078d
 80404d0:	08040795 	.word	0x08040795
 80404d4:	0804079d 	.word	0x0804079d
 80404d8:	080407a5 	.word	0x080407a5
 80404dc:	080407ad 	.word	0x080407ad
 80404e0:	080407b5 	.word	0x080407b5
 80404e4:	080407bd 	.word	0x080407bd
 80404e8:	080407c5 	.word	0x080407c5
 80404ec:	080407cd 	.word	0x080407cd
 80404f0:	080407d5 	.word	0x080407d5
 80404f4:	080407dd 	.word	0x080407dd
 80404f8:	080407e5 	.word	0x080407e5
 80404fc:	080407ed 	.word	0x080407ed
 8040500:	080407f5 	.word	0x080407f5
 8040504:	080407fd 	.word	0x080407fd
 8040508:	08040805 	.word	0x08040805
 804050c:	0804080d 	.word	0x0804080d
 8040510:	08040815 	.word	0x08040815
 8040514:	0804081d 	.word	0x0804081d
 8040518:	08040825 	.word	0x08040825
 804051c:	0804082d 	.word	0x0804082d
 8040520:	08040835 	.word	0x08040835
 8040524:	0804083d 	.word	0x0804083d
 8040528:	08040845 	.word	0x08040845
 804052c:	0804084d 	.word	0x0804084d
 8040530:	08040855 	.word	0x08040855
 8040534:	0804085d 	.word	0x0804085d
 8040538:	08040865 	.word	0x08040865
 804053c:	0804086d 	.word	0x0804086d
 8040540:	08040875 	.word	0x08040875
 8040544:	0804087d 	.word	0x0804087d
 8040548:	08040885 	.word	0x08040885
 804054c:	0804088d 	.word	0x0804088d
 8040550:	08040895 	.word	0x08040895
 8040554:	0804089d 	.word	0x0804089d
 8040558:	080408a5 	.word	0x080408a5
 804055c:	080408ad 	.word	0x080408ad
 8040560:	080408b5 	.word	0x080408b5
 8040564:	080408bd 	.word	0x080408bd
 8040568:	080408c5 	.word	0x080408c5
 804056c:	080408cd 	.word	0x080408cd
 8040570:	080408d5 	.word	0x080408d5
 8040574:	080408dd 	.word	0x080408dd
 8040578:	080408e5 	.word	0x080408e5
 804057c:	080408ed 	.word	0x080408ed
 8040580:	080408f5 	.word	0x080408f5
 8040584:	080408fd 	.word	0x080408fd
 8040588:	08040905 	.word	0x08040905
 804058c:	0804090d 	.word	0x0804090d
 8040590:	08040915 	.word	0x08040915
 8040594:	0804091d 	.word	0x0804091d
 8040598:	08040925 	.word	0x08040925
 804059c:	0804092d 	.word	0x0804092d
 80405a0:	08040935 	.word	0x08040935
 80405a4:	0804093d 	.word	0x0804093d
 80405a8:	08040945 	.word	0x08040945
 80405ac:	0804094d 	.word	0x0804094d
 80405b0:	08040955 	.word	0x08040955
 80405b4:	0804095d 	.word	0x0804095d
 80405b8:	08040965 	.word	0x08040965
 80405bc:	0804096d 	.word	0x0804096d
 80405c0:	08040975 	.word	0x08040975
 80405c4:	0804097d 	.word	0x0804097d
 80405c8:	08040985 	.word	0x08040985
 80405cc:	0804098d 	.word	0x0804098d
 80405d0:	08040995 	.word	0x08040995
 80405d4:	0804099d 	.word	0x0804099d
	.word	.L143+1
	.word	.L144+1
	.word	.L145+1
	.p2align 1
.L25:
	ldr	r3, [r7, #4]
 80405d8:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80405da:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80405dc:	607b      	str	r3, [r7, #4]
	b	.L146
 80405de:	e1e6      	b.n	80409ae <swi120+0x61a>
.L27:
	ldr	r3, [r7, #4]
 80405e0:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80405e2:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80405e4:	607b      	str	r3, [r7, #4]
	b	.L146
 80405e6:	e1e2      	b.n	80409ae <swi120+0x61a>
.L28:
	ldr	r3, [r7, #4]
 80405e8:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80405ea:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80405ec:	607b      	str	r3, [r7, #4]
	b	.L146
 80405ee:	e1de      	b.n	80409ae <swi120+0x61a>
.L29:
	ldr	r3, [r7, #4]
 80405f0:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80405f2:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80405f4:	607b      	str	r3, [r7, #4]
	b	.L146
 80405f6:	e1da      	b.n	80409ae <swi120+0x61a>
.L30:
	ldr	r3, [r7, #4]
 80405f8:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80405fa:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80405fc:	607b      	str	r3, [r7, #4]
	b	.L146
 80405fe:	e1d6      	b.n	80409ae <swi120+0x61a>
.L31:
	ldr	r3, [r7, #4]
 8040600:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040602:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040604:	607b      	str	r3, [r7, #4]
	b	.L146
 8040606:	e1d2      	b.n	80409ae <swi120+0x61a>
.L32:
	ldr	r3, [r7, #4]
 8040608:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804060a:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 804060c:	607b      	str	r3, [r7, #4]
	b	.L146
 804060e:	e1ce      	b.n	80409ae <swi120+0x61a>
.L33:
	ldr	r3, [r7, #4]
 8040610:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040612:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040614:	607b      	str	r3, [r7, #4]
	b	.L146
 8040616:	e1ca      	b.n	80409ae <swi120+0x61a>
.L34:
	ldr	r3, [r7, #4]
 8040618:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804061a:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 804061c:	607b      	str	r3, [r7, #4]
	b	.L146
 804061e:	e1c6      	b.n	80409ae <swi120+0x61a>
.L35:
	ldr	r3, [r7, #4]
 8040620:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040622:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040624:	607b      	str	r3, [r7, #4]
	b	.L146
 8040626:	e1c2      	b.n	80409ae <swi120+0x61a>
.L36:
	ldr	r3, [r7, #4]
 8040628:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804062a:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 804062c:	607b      	str	r3, [r7, #4]
	b	.L146
 804062e:	e1be      	b.n	80409ae <swi120+0x61a>
.L37:
	ldr	r3, [r7, #4]
 8040630:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040632:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040634:	607b      	str	r3, [r7, #4]
	b	.L146
 8040636:	e1ba      	b.n	80409ae <swi120+0x61a>
.L38:
	ldr	r3, [r7, #4]
 8040638:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804063a:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 804063c:	607b      	str	r3, [r7, #4]
	b	.L146
 804063e:	e1b6      	b.n	80409ae <swi120+0x61a>
.L39:
	ldr	r3, [r7, #4]
 8040640:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040642:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040644:	607b      	str	r3, [r7, #4]
	b	.L146
 8040646:	e1b2      	b.n	80409ae <swi120+0x61a>
.L40:
	ldr	r3, [r7, #4]
 8040648:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804064a:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 804064c:	607b      	str	r3, [r7, #4]
	b	.L146
 804064e:	e1ae      	b.n	80409ae <swi120+0x61a>
.L41:
	ldr	r3, [r7, #4]
 8040650:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040652:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040654:	607b      	str	r3, [r7, #4]
	b	.L146
 8040656:	e1aa      	b.n	80409ae <swi120+0x61a>
.L42:
	ldr	r3, [r7, #4]
 8040658:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804065a:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 804065c:	607b      	str	r3, [r7, #4]
	b	.L146
 804065e:	e1a6      	b.n	80409ae <swi120+0x61a>
.L43:
	ldr	r3, [r7, #4]
 8040660:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040662:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040664:	607b      	str	r3, [r7, #4]
	b	.L146
 8040666:	e1a2      	b.n	80409ae <swi120+0x61a>
.L44:
	ldr	r3, [r7, #4]
 8040668:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804066a:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 804066c:	607b      	str	r3, [r7, #4]
	b	.L146
 804066e:	e19e      	b.n	80409ae <swi120+0x61a>
.L45:
	ldr	r3, [r7, #4]
 8040670:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040672:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040674:	607b      	str	r3, [r7, #4]
	b	.L146
 8040676:	e19a      	b.n	80409ae <swi120+0x61a>
.L46:
	ldr	r3, [r7, #4]
 8040678:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804067a:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 804067c:	607b      	str	r3, [r7, #4]
	b	.L146
 804067e:	e196      	b.n	80409ae <swi120+0x61a>
.L47:
	ldr	r3, [r7, #4]
 8040680:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040682:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040684:	607b      	str	r3, [r7, #4]
	b	.L146
 8040686:	e192      	b.n	80409ae <swi120+0x61a>
.L48:
	ldr	r3, [r7, #4]
 8040688:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804068a:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 804068c:	607b      	str	r3, [r7, #4]
	b	.L146
 804068e:	e18e      	b.n	80409ae <swi120+0x61a>
.L49:
	ldr	r3, [r7, #4]
 8040690:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040692:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040694:	607b      	str	r3, [r7, #4]
	b	.L146
 8040696:	e18a      	b.n	80409ae <swi120+0x61a>
.L50:
	ldr	r3, [r7, #4]
 8040698:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804069a:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 804069c:	607b      	str	r3, [r7, #4]
	b	.L146
 804069e:	e186      	b.n	80409ae <swi120+0x61a>
.L51:
	ldr	r3, [r7, #4]
 80406a0:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80406a2:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80406a4:	607b      	str	r3, [r7, #4]
	b	.L146
 80406a6:	e182      	b.n	80409ae <swi120+0x61a>
.L52:
	ldr	r3, [r7, #4]
 80406a8:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80406aa:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80406ac:	607b      	str	r3, [r7, #4]
	b	.L146
 80406ae:	e17e      	b.n	80409ae <swi120+0x61a>
.L53:
	ldr	r3, [r7, #4]
 80406b0:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80406b2:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80406b4:	607b      	str	r3, [r7, #4]
	b	.L146
 80406b6:	e17a      	b.n	80409ae <swi120+0x61a>
.L54:
	ldr	r3, [r7, #4]
 80406b8:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80406ba:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80406bc:	607b      	str	r3, [r7, #4]
	b	.L146
 80406be:	e176      	b.n	80409ae <swi120+0x61a>
.L55:
	ldr	r3, [r7, #4]
 80406c0:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80406c2:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80406c4:	607b      	str	r3, [r7, #4]
	b	.L146
 80406c6:	e172      	b.n	80409ae <swi120+0x61a>
.L56:
	ldr	r3, [r7, #4]
 80406c8:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80406ca:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80406cc:	607b      	str	r3, [r7, #4]
	b	.L146
 80406ce:	e16e      	b.n	80409ae <swi120+0x61a>
 80406d0:	08040239 	.word	0x08040239
 80406d4:	08040e3c 	.word	0x08040e3c
 80406d8:	12345678 	.word	0x12345678
.L149:
	.word	safeFunction
	.word	134483516
	.word	305419896
.L57:
	ldr	r3, [r7, #4]
 80406dc:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80406de:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80406e0:	607b      	str	r3, [r7, #4]
	b	.L146
 80406e2:	e164      	b.n	80409ae <swi120+0x61a>
.L58:
	ldr	r3, [r7, #4]
 80406e4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80406e6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80406e8:	607b      	str	r3, [r7, #4]
	b	.L146
 80406ea:	e160      	b.n	80409ae <swi120+0x61a>
.L59:
	ldr	r3, [r7, #4]
 80406ec:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80406ee:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80406f0:	607b      	str	r3, [r7, #4]
	b	.L146
 80406f2:	e15c      	b.n	80409ae <swi120+0x61a>
.L60:
	ldr	r3, [r7, #4]
 80406f4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80406f6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80406f8:	607b      	str	r3, [r7, #4]
	b	.L146
 80406fa:	e158      	b.n	80409ae <swi120+0x61a>
.L61:
	ldr	r3, [r7, #4]
 80406fc:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80406fe:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040700:	607b      	str	r3, [r7, #4]
	b	.L146
 8040702:	e154      	b.n	80409ae <swi120+0x61a>
.L62:
	ldr	r3, [r7, #4]
 8040704:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040706:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040708:	607b      	str	r3, [r7, #4]
	b	.L146
 804070a:	e150      	b.n	80409ae <swi120+0x61a>
.L63:
	ldr	r3, [r7, #4]
 804070c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804070e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040710:	607b      	str	r3, [r7, #4]
	b	.L146
 8040712:	e14c      	b.n	80409ae <swi120+0x61a>
.L64:
	ldr	r3, [r7, #4]
 8040714:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040716:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040718:	607b      	str	r3, [r7, #4]
	b	.L146
 804071a:	e148      	b.n	80409ae <swi120+0x61a>
.L65:
	ldr	r3, [r7, #4]
 804071c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804071e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040720:	607b      	str	r3, [r7, #4]
	b	.L146
 8040722:	e144      	b.n	80409ae <swi120+0x61a>
.L66:
	ldr	r3, [r7, #4]
 8040724:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040726:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040728:	607b      	str	r3, [r7, #4]
	b	.L146
 804072a:	e140      	b.n	80409ae <swi120+0x61a>
.L67:
	ldr	r3, [r7, #4]
 804072c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804072e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040730:	607b      	str	r3, [r7, #4]
	b	.L146
 8040732:	e13c      	b.n	80409ae <swi120+0x61a>
.L68:
	ldr	r3, [r7, #4]
 8040734:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040736:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040738:	607b      	str	r3, [r7, #4]
	b	.L146
 804073a:	e138      	b.n	80409ae <swi120+0x61a>
.L69:
	ldr	r3, [r7, #4]
 804073c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804073e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040740:	607b      	str	r3, [r7, #4]
	b	.L146
 8040742:	e134      	b.n	80409ae <swi120+0x61a>
.L70:
	ldr	r3, [r7, #4]
 8040744:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040746:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040748:	607b      	str	r3, [r7, #4]
	b	.L146
 804074a:	e130      	b.n	80409ae <swi120+0x61a>
.L71:
	ldr	r3, [r7, #4]
 804074c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804074e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040750:	607b      	str	r3, [r7, #4]
	b	.L146
 8040752:	e12c      	b.n	80409ae <swi120+0x61a>
.L72:
	ldr	r3, [r7, #4]
 8040754:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040756:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040758:	607b      	str	r3, [r7, #4]
	b	.L146
 804075a:	e128      	b.n	80409ae <swi120+0x61a>
.L73:
	ldr	r3, [r7, #4]
 804075c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804075e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040760:	607b      	str	r3, [r7, #4]
	b	.L146
 8040762:	e124      	b.n	80409ae <swi120+0x61a>
.L74:
	ldr	r3, [r7, #4]
 8040764:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040766:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040768:	607b      	str	r3, [r7, #4]
	b	.L146
 804076a:	e120      	b.n	80409ae <swi120+0x61a>
.L75:
	ldr	r3, [r7, #4]
 804076c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804076e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040770:	607b      	str	r3, [r7, #4]
	b	.L146
 8040772:	e11c      	b.n	80409ae <swi120+0x61a>
.L76:
	ldr	r3, [r7, #4]
 8040774:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040776:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040778:	607b      	str	r3, [r7, #4]
	b	.L146
 804077a:	e118      	b.n	80409ae <swi120+0x61a>
.L77:
	ldr	r3, [r7, #4]
 804077c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804077e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040780:	607b      	str	r3, [r7, #4]
	b	.L146
 8040782:	e114      	b.n	80409ae <swi120+0x61a>
.L78:
	ldr	r3, [r7, #4]
 8040784:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040786:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040788:	607b      	str	r3, [r7, #4]
	b	.L146
 804078a:	e110      	b.n	80409ae <swi120+0x61a>
.L79:
	ldr	r3, [r7, #4]
 804078c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804078e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040790:	607b      	str	r3, [r7, #4]
	b	.L146
 8040792:	e10c      	b.n	80409ae <swi120+0x61a>
.L80:
	ldr	r3, [r7, #4]
 8040794:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040796:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040798:	607b      	str	r3, [r7, #4]
	b	.L146
 804079a:	e108      	b.n	80409ae <swi120+0x61a>
.L81:
	ldr	r3, [r7, #4]
 804079c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804079e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80407a0:	607b      	str	r3, [r7, #4]
	b	.L146
 80407a2:	e104      	b.n	80409ae <swi120+0x61a>
.L82:
	ldr	r3, [r7, #4]
 80407a4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80407a6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80407a8:	607b      	str	r3, [r7, #4]
	b	.L146
 80407aa:	e100      	b.n	80409ae <swi120+0x61a>
.L83:
	ldr	r3, [r7, #4]
 80407ac:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80407ae:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80407b0:	607b      	str	r3, [r7, #4]
	b	.L146
 80407b2:	e0fc      	b.n	80409ae <swi120+0x61a>
.L84:
	ldr	r3, [r7, #4]
 80407b4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80407b6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80407b8:	607b      	str	r3, [r7, #4]
	b	.L146
 80407ba:	e0f8      	b.n	80409ae <swi120+0x61a>
.L85:
	ldr	r3, [r7, #4]
 80407bc:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80407be:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80407c0:	607b      	str	r3, [r7, #4]
	b	.L146
 80407c2:	e0f4      	b.n	80409ae <swi120+0x61a>
.L86:
	ldr	r3, [r7, #4]
 80407c4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80407c6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80407c8:	607b      	str	r3, [r7, #4]
	b	.L146
 80407ca:	e0f0      	b.n	80409ae <swi120+0x61a>
.L87:
	ldr	r3, [r7, #4]
 80407cc:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80407ce:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80407d0:	607b      	str	r3, [r7, #4]
	b	.L146
 80407d2:	e0ec      	b.n	80409ae <swi120+0x61a>
.L88:
	ldr	r3, [r7, #4]
 80407d4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80407d6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80407d8:	607b      	str	r3, [r7, #4]
	b	.L146
 80407da:	e0e8      	b.n	80409ae <swi120+0x61a>
.L89:
	ldr	r3, [r7, #4]
 80407dc:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80407de:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80407e0:	607b      	str	r3, [r7, #4]
	b	.L146
 80407e2:	e0e4      	b.n	80409ae <swi120+0x61a>
.L90:
	ldr	r3, [r7, #4]
 80407e4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80407e6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80407e8:	607b      	str	r3, [r7, #4]
	b	.L146
 80407ea:	e0e0      	b.n	80409ae <swi120+0x61a>
.L91:
	ldr	r3, [r7, #4]
 80407ec:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80407ee:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80407f0:	607b      	str	r3, [r7, #4]
	b	.L146
 80407f2:	e0dc      	b.n	80409ae <swi120+0x61a>
.L92:
	ldr	r3, [r7, #4]
 80407f4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80407f6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80407f8:	607b      	str	r3, [r7, #4]
	b	.L146
 80407fa:	e0d8      	b.n	80409ae <swi120+0x61a>
.L93:
	ldr	r3, [r7, #4]
 80407fc:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80407fe:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040800:	607b      	str	r3, [r7, #4]
	b	.L146
 8040802:	e0d4      	b.n	80409ae <swi120+0x61a>
.L94:
	ldr	r3, [r7, #4]
 8040804:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040806:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040808:	607b      	str	r3, [r7, #4]
	b	.L146
 804080a:	e0d0      	b.n	80409ae <swi120+0x61a>
.L95:
	ldr	r3, [r7, #4]
 804080c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804080e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040810:	607b      	str	r3, [r7, #4]
	b	.L146
 8040812:	e0cc      	b.n	80409ae <swi120+0x61a>
.L96:
	ldr	r3, [r7, #4]
 8040814:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040816:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040818:	607b      	str	r3, [r7, #4]
	b	.L146
 804081a:	e0c8      	b.n	80409ae <swi120+0x61a>
.L97:
	ldr	r3, [r7, #4]
 804081c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804081e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040820:	607b      	str	r3, [r7, #4]
	b	.L146
 8040822:	e0c4      	b.n	80409ae <swi120+0x61a>
.L98:
	ldr	r3, [r7, #4]
 8040824:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040826:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040828:	607b      	str	r3, [r7, #4]
	b	.L146
 804082a:	e0c0      	b.n	80409ae <swi120+0x61a>
.L99:
	ldr	r3, [r7, #4]
 804082c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804082e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040830:	607b      	str	r3, [r7, #4]
	b	.L146
 8040832:	e0bc      	b.n	80409ae <swi120+0x61a>
.L100:
	ldr	r3, [r7, #4]
 8040834:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040836:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040838:	607b      	str	r3, [r7, #4]
	b	.L146
 804083a:	e0b8      	b.n	80409ae <swi120+0x61a>
.L101:
	ldr	r3, [r7, #4]
 804083c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804083e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040840:	607b      	str	r3, [r7, #4]
	b	.L146
 8040842:	e0b4      	b.n	80409ae <swi120+0x61a>
.L102:
	ldr	r3, [r7, #4]
 8040844:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040846:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040848:	607b      	str	r3, [r7, #4]
	b	.L146
 804084a:	e0b0      	b.n	80409ae <swi120+0x61a>
.L103:
	ldr	r3, [r7, #4]
 804084c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804084e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040850:	607b      	str	r3, [r7, #4]
	b	.L146
 8040852:	e0ac      	b.n	80409ae <swi120+0x61a>
.L104:
	ldr	r3, [r7, #4]
 8040854:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040856:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040858:	607b      	str	r3, [r7, #4]
	b	.L146
 804085a:	e0a8      	b.n	80409ae <swi120+0x61a>
.L105:
	ldr	r3, [r7, #4]
 804085c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804085e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040860:	607b      	str	r3, [r7, #4]
	b	.L146
 8040862:	e0a4      	b.n	80409ae <swi120+0x61a>
.L106:
	ldr	r3, [r7, #4]
 8040864:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040866:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040868:	607b      	str	r3, [r7, #4]
	b	.L146
 804086a:	e0a0      	b.n	80409ae <swi120+0x61a>
.L107:
	ldr	r3, [r7, #4]
 804086c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804086e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040870:	607b      	str	r3, [r7, #4]
	b	.L146
 8040872:	e09c      	b.n	80409ae <swi120+0x61a>
.L108:
	ldr	r3, [r7, #4]
 8040874:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040876:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040878:	607b      	str	r3, [r7, #4]
	b	.L146
 804087a:	e098      	b.n	80409ae <swi120+0x61a>
.L109:
	ldr	r3, [r7, #4]
 804087c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804087e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040880:	607b      	str	r3, [r7, #4]
	b	.L146
 8040882:	e094      	b.n	80409ae <swi120+0x61a>
.L110:
	ldr	r3, [r7, #4]
 8040884:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040886:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040888:	607b      	str	r3, [r7, #4]
	b	.L146
 804088a:	e090      	b.n	80409ae <swi120+0x61a>
.L111:
	ldr	r3, [r7, #4]
 804088c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804088e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040890:	607b      	str	r3, [r7, #4]
	b	.L146
 8040892:	e08c      	b.n	80409ae <swi120+0x61a>
.L112:
	ldr	r3, [r7, #4]
 8040894:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040896:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040898:	607b      	str	r3, [r7, #4]
	b	.L146
 804089a:	e088      	b.n	80409ae <swi120+0x61a>
.L113:
	ldr	r3, [r7, #4]
 804089c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804089e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80408a0:	607b      	str	r3, [r7, #4]
	b	.L146
 80408a2:	e084      	b.n	80409ae <swi120+0x61a>
.L114:
	ldr	r3, [r7, #4]
 80408a4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80408a6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80408a8:	607b      	str	r3, [r7, #4]
	b	.L146
 80408aa:	e080      	b.n	80409ae <swi120+0x61a>
.L115:
	ldr	r3, [r7, #4]
 80408ac:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80408ae:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80408b0:	607b      	str	r3, [r7, #4]
	b	.L146
 80408b2:	e07c      	b.n	80409ae <swi120+0x61a>
.L116:
	ldr	r3, [r7, #4]
 80408b4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80408b6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80408b8:	607b      	str	r3, [r7, #4]
	b	.L146
 80408ba:	e078      	b.n	80409ae <swi120+0x61a>
.L117:
	ldr	r3, [r7, #4]
 80408bc:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80408be:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80408c0:	607b      	str	r3, [r7, #4]
	b	.L146
 80408c2:	e074      	b.n	80409ae <swi120+0x61a>
.L118:
	ldr	r3, [r7, #4]
 80408c4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80408c6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80408c8:	607b      	str	r3, [r7, #4]
	b	.L146
 80408ca:	e070      	b.n	80409ae <swi120+0x61a>
.L119:
	ldr	r3, [r7, #4]
 80408cc:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80408ce:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80408d0:	607b      	str	r3, [r7, #4]
	b	.L146
 80408d2:	e06c      	b.n	80409ae <swi120+0x61a>
.L120:
	ldr	r3, [r7, #4]
 80408d4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80408d6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80408d8:	607b      	str	r3, [r7, #4]
	b	.L146
 80408da:	e068      	b.n	80409ae <swi120+0x61a>
.L121:
	ldr	r3, [r7, #4]
 80408dc:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80408de:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80408e0:	607b      	str	r3, [r7, #4]
	b	.L146
 80408e2:	e064      	b.n	80409ae <swi120+0x61a>
.L122:
	ldr	r3, [r7, #4]
 80408e4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80408e6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80408e8:	607b      	str	r3, [r7, #4]
	b	.L146
 80408ea:	e060      	b.n	80409ae <swi120+0x61a>
.L123:
	ldr	r3, [r7, #4]
 80408ec:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80408ee:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80408f0:	607b      	str	r3, [r7, #4]
	b	.L146
 80408f2:	e05c      	b.n	80409ae <swi120+0x61a>
.L124:
	ldr	r3, [r7, #4]
 80408f4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80408f6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80408f8:	607b      	str	r3, [r7, #4]
	b	.L146
 80408fa:	e058      	b.n	80409ae <swi120+0x61a>
.L125:
	ldr	r3, [r7, #4]
 80408fc:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 80408fe:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040900:	607b      	str	r3, [r7, #4]
	b	.L146
 8040902:	e054      	b.n	80409ae <swi120+0x61a>
.L126:
	ldr	r3, [r7, #4]
 8040904:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040906:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040908:	607b      	str	r3, [r7, #4]
	b	.L146
 804090a:	e050      	b.n	80409ae <swi120+0x61a>
.L127:
	ldr	r3, [r7, #4]
 804090c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804090e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040910:	607b      	str	r3, [r7, #4]
	b	.L146
 8040912:	e04c      	b.n	80409ae <swi120+0x61a>
.L128:
	ldr	r3, [r7, #4]
 8040914:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040916:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040918:	607b      	str	r3, [r7, #4]
	b	.L146
 804091a:	e048      	b.n	80409ae <swi120+0x61a>
.L129:
	ldr	r3, [r7, #4]
 804091c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804091e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040920:	607b      	str	r3, [r7, #4]
	b	.L146
 8040922:	e044      	b.n	80409ae <swi120+0x61a>
.L130:
	ldr	r3, [r7, #4]
 8040924:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040926:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040928:	607b      	str	r3, [r7, #4]
	b	.L146
 804092a:	e040      	b.n	80409ae <swi120+0x61a>
.L131:
	ldr	r3, [r7, #4]
 804092c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804092e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040930:	607b      	str	r3, [r7, #4]
	b	.L146
 8040932:	e03c      	b.n	80409ae <swi120+0x61a>
.L132:
	ldr	r3, [r7, #4]
 8040934:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040936:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040938:	607b      	str	r3, [r7, #4]
	b	.L146
 804093a:	e038      	b.n	80409ae <swi120+0x61a>
.L133:
	ldr	r3, [r7, #4]
 804093c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804093e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040940:	607b      	str	r3, [r7, #4]
	b	.L146
 8040942:	e034      	b.n	80409ae <swi120+0x61a>
.L134:
	ldr	r3, [r7, #4]
 8040944:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040946:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040948:	607b      	str	r3, [r7, #4]
	b	.L146
 804094a:	e030      	b.n	80409ae <swi120+0x61a>
.L135:
	ldr	r3, [r7, #4]
 804094c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804094e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040950:	607b      	str	r3, [r7, #4]
	b	.L146
 8040952:	e02c      	b.n	80409ae <swi120+0x61a>
.L136:
	ldr	r3, [r7, #4]
 8040954:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040956:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040958:	607b      	str	r3, [r7, #4]
	b	.L146
 804095a:	e028      	b.n	80409ae <swi120+0x61a>
.L137:
	ldr	r3, [r7, #4]
 804095c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804095e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040960:	607b      	str	r3, [r7, #4]
	b	.L146
 8040962:	e024      	b.n	80409ae <swi120+0x61a>
.L138:
	ldr	r3, [r7, #4]
 8040964:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040966:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040968:	607b      	str	r3, [r7, #4]
	b	.L146
 804096a:	e020      	b.n	80409ae <swi120+0x61a>
.L139:
	ldr	r3, [r7, #4]
 804096c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804096e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040970:	607b      	str	r3, [r7, #4]
	b	.L146
 8040972:	e01c      	b.n	80409ae <swi120+0x61a>
.L140:
	ldr	r3, [r7, #4]
 8040974:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040976:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040978:	607b      	str	r3, [r7, #4]
	b	.L146
 804097a:	e018      	b.n	80409ae <swi120+0x61a>
.L141:
	ldr	r3, [r7, #4]
 804097c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804097e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040980:	607b      	str	r3, [r7, #4]
	b	.L146
 8040982:	e014      	b.n	80409ae <swi120+0x61a>
.L142:
	ldr	r3, [r7, #4]
 8040984:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040986:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040988:	607b      	str	r3, [r7, #4]
	b	.L146
 804098a:	e010      	b.n	80409ae <swi120+0x61a>
.L143:
	ldr	r3, [r7, #4]
 804098c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804098e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040990:	607b      	str	r3, [r7, #4]
	b	.L146
 8040992:	e00c      	b.n	80409ae <swi120+0x61a>
.L144:
	ldr	r3, [r7, #4]
 8040994:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040996:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040998:	607b      	str	r3, [r7, #4]
	b	.L146
 804099a:	e008      	b.n	80409ae <swi120+0x61a>
.L145:
	ldr	r3, [r7, #4]
 804099c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804099e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 80409a0:	607b      	str	r3, [r7, #4]
	b	.L146
 80409a2:	e004      	b.n	80409ae <swi120+0x61a>
.L246:
	bl	SECURE_log_cond_br_taken
 80409a4:	f000 fed8 	bl	8041758 <__SECURE_log_cond_br_taken_veneer>
.L24:
	ldr	r3, [r7, #4]
 80409a8:	687b      	ldr	r3, [r7, #4]
	subs	r3, r3, #1
 80409aa:	3b01      	subs	r3, #1
	str	r3, [r7, #4]
 80409ac:	607b      	str	r3, [r7, #4]
.L146:
	ldr	r3, [r7, #28]
 80409ae:	69fb      	ldr	r3, [r7, #28]
	adds	r3, r3, #1
 80409b0:	3301      	adds	r3, #1
	str	r3, [r7, #28]
 80409b2:	61fb      	str	r3, [r7, #28]
.L23:
	ldr	r3, [r7, #28]
 80409b4:	69fb      	ldr	r3, [r7, #28]
	cmp	r3, #119
 80409b6:	2b77      	cmp	r3, #119	; 0x77
	ble	.L147
 80409b8:	f77f ad11 	ble.w	80403de <swi120+0x4a>
	bl	SECURE_log_cond_br_not_taken
 80409bc:	f000 fea4 	bl	8041708 <__SECURE_log_cond_br_not_taken_veneer>
	ldr	r3, [r7, #24]
 80409c0:	69bb      	ldr	r3, [r7, #24]
	ldr	r3, [r3]
 80409c2:	681b      	ldr	r3, [r3, #0]
	mov	r10, r3
 80409c4:	469a      	mov	sl, r3
	bl	SECURE_log_indr_fwd
 80409c6:	f000 feb7 	bl	8041738 <__SECURE_log_indr_fwd_veneer>
	ldr	r3, [r7, #4]
 80409ca:	687b      	ldr	r3, [r7, #4]
	mov	r0, r3
 80409cc:	4618      	mov	r0, r3
	adds	r7, r7, #32
 80409ce:	3720      	adds	r7, #32
	mov	sp, r7
 80409d0:	46bd      	mov	sp, r7
	@ sp needed
	pop	{r7, lr}
 80409d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	b	SECURE_log_ret
 80409d6:	f000 beb7 	b.w	8041748 <__SECURE_log_ret_veneer>
 80409da:	bf00      	nop

080409dc <swi50>:
	.type	swi50, %function
swi50:
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 1, uses_anonymous_args = 0
	@ link register save eliminated.
	push	{r7, lr}
 80409dc:	b580      	push	{r7, lr}
	sub	sp, sp, #20
 80409de:	b085      	sub	sp, #20
	add	r7, sp, #0
 80409e0:	af00      	add	r7, sp, #0
	str	r0, [r7, #4]
 80409e2:	6078      	str	r0, [r7, #4]
	movs	r3, #0
 80409e4:	2300      	movs	r3, #0
	str	r3, [r7, #12]
 80409e6:	60fb      	str	r3, [r7, #12]
	b	.L152
 80409e8:	e17c      	b.n	8040ce4 <swi50+0x308>
.L216:
	bl	SECURE_log_cond_br_taken
 80409ea:	f000 feb5 	bl	8041758 <__SECURE_log_cond_br_taken_veneer>
	ldr	r3, [r7, #12]
 80409ee:	68fb      	ldr	r3, [r7, #12]
	cmp	r3, #59
 80409f0:	2b3b      	cmp	r3, #59	; 0x3b
	bhi	.L247
 80409f2:	f200 816f 	bhi.w	8040cd4 <swi50+0x2f8>
	bl	SECURE_log_cond_br_not_taken
 80409f6:	f000 fe87 	bl	8041708 <__SECURE_log_cond_br_not_taken_veneer>
	adr	r2, .L155
 80409fa:	a202      	add	r2, pc, #8	; (adr r2, 8040a04 <swi50+0x28>)
	ldr	r10, [r2, r3, lsl #2]
 80409fc:	f852 a023 	ldr.w	sl, [r2, r3, lsl #2]
	b	SECURE_log_indr_fwd
 8040a00:	f000 be9a 	b.w	8041738 <__SECURE_log_indr_fwd_veneer>
 8040a04:	08040af5 	.word	0x08040af5
 8040a08:	08040afd 	.word	0x08040afd
 8040a0c:	08040b05 	.word	0x08040b05
 8040a10:	08040b0d 	.word	0x08040b0d
 8040a14:	08040b15 	.word	0x08040b15
 8040a18:	08040b1d 	.word	0x08040b1d
 8040a1c:	08040b25 	.word	0x08040b25
 8040a20:	08040b2d 	.word	0x08040b2d
 8040a24:	08040b35 	.word	0x08040b35
 8040a28:	08040b3d 	.word	0x08040b3d
 8040a2c:	08040b45 	.word	0x08040b45
 8040a30:	08040b4d 	.word	0x08040b4d
 8040a34:	08040b55 	.word	0x08040b55
 8040a38:	08040b5d 	.word	0x08040b5d
 8040a3c:	08040b65 	.word	0x08040b65
 8040a40:	08040b6d 	.word	0x08040b6d
 8040a44:	08040b75 	.word	0x08040b75
 8040a48:	08040b7d 	.word	0x08040b7d
 8040a4c:	08040b85 	.word	0x08040b85
 8040a50:	08040b8d 	.word	0x08040b8d
 8040a54:	08040b95 	.word	0x08040b95
 8040a58:	08040b9d 	.word	0x08040b9d
 8040a5c:	08040ba5 	.word	0x08040ba5
 8040a60:	08040bad 	.word	0x08040bad
 8040a64:	08040bb5 	.word	0x08040bb5
 8040a68:	08040bbd 	.word	0x08040bbd
 8040a6c:	08040bc5 	.word	0x08040bc5
 8040a70:	08040bcd 	.word	0x08040bcd
 8040a74:	08040bd5 	.word	0x08040bd5
 8040a78:	08040bdd 	.word	0x08040bdd
 8040a7c:	08040be5 	.word	0x08040be5
 8040a80:	08040bed 	.word	0x08040bed
 8040a84:	08040bf5 	.word	0x08040bf5
 8040a88:	08040bfd 	.word	0x08040bfd
 8040a8c:	08040c05 	.word	0x08040c05
 8040a90:	08040c0d 	.word	0x08040c0d
 8040a94:	08040c15 	.word	0x08040c15
 8040a98:	08040c1d 	.word	0x08040c1d
 8040a9c:	08040c25 	.word	0x08040c25
 8040aa0:	08040c2d 	.word	0x08040c2d
 8040aa4:	08040c35 	.word	0x08040c35
 8040aa8:	08040c3d 	.word	0x08040c3d
 8040aac:	08040c45 	.word	0x08040c45
 8040ab0:	08040c4d 	.word	0x08040c4d
 8040ab4:	08040c55 	.word	0x08040c55
 8040ab8:	08040c5d 	.word	0x08040c5d
 8040abc:	08040c65 	.word	0x08040c65
 8040ac0:	08040c6d 	.word	0x08040c6d
 8040ac4:	08040c75 	.word	0x08040c75
 8040ac8:	08040c7d 	.word	0x08040c7d
 8040acc:	08040c85 	.word	0x08040c85
 8040ad0:	08040c8d 	.word	0x08040c8d
 8040ad4:	08040c95 	.word	0x08040c95
 8040ad8:	08040c9d 	.word	0x08040c9d
 8040adc:	08040ca5 	.word	0x08040ca5
 8040ae0:	08040cad 	.word	0x08040cad
 8040ae4:	08040cb5 	.word	0x08040cb5
 8040ae8:	08040cbd 	.word	0x08040cbd
 8040aec:	08040cc5 	.word	0x08040cc5
 8040af0:	08040ccd 	.word	0x08040ccd
	.word	.L212+1
	.word	.L213+1
	.word	.L214+1
	.p2align 1
.L154:
	ldr	r3, [r7, #4]
 8040af4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040af6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040af8:	607b      	str	r3, [r7, #4]
	b	.L215
 8040afa:	e0f0      	b.n	8040cde <swi50+0x302>
.L156:
	ldr	r3, [r7, #4]
 8040afc:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040afe:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b00:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b02:	e0ec      	b.n	8040cde <swi50+0x302>
.L157:
	ldr	r3, [r7, #4]
 8040b04:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b06:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b08:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b0a:	e0e8      	b.n	8040cde <swi50+0x302>
.L158:
	ldr	r3, [r7, #4]
 8040b0c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b0e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b10:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b12:	e0e4      	b.n	8040cde <swi50+0x302>
.L159:
	ldr	r3, [r7, #4]
 8040b14:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b16:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b18:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b1a:	e0e0      	b.n	8040cde <swi50+0x302>
.L160:
	ldr	r3, [r7, #4]
 8040b1c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b1e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b20:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b22:	e0dc      	b.n	8040cde <swi50+0x302>
.L161:
	ldr	r3, [r7, #4]
 8040b24:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b26:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b28:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b2a:	e0d8      	b.n	8040cde <swi50+0x302>
.L162:
	ldr	r3, [r7, #4]
 8040b2c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b2e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b30:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b32:	e0d4      	b.n	8040cde <swi50+0x302>
.L163:
	ldr	r3, [r7, #4]
 8040b34:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b36:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b38:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b3a:	e0d0      	b.n	8040cde <swi50+0x302>
.L164:
	ldr	r3, [r7, #4]
 8040b3c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b3e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b40:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b42:	e0cc      	b.n	8040cde <swi50+0x302>
.L165:
	ldr	r3, [r7, #4]
 8040b44:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b46:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b48:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b4a:	e0c8      	b.n	8040cde <swi50+0x302>
.L166:
	ldr	r3, [r7, #4]
 8040b4c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b4e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b50:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b52:	e0c4      	b.n	8040cde <swi50+0x302>
.L167:
	ldr	r3, [r7, #4]
 8040b54:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b56:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b58:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b5a:	e0c0      	b.n	8040cde <swi50+0x302>
.L168:
	ldr	r3, [r7, #4]
 8040b5c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b5e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b60:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b62:	e0bc      	b.n	8040cde <swi50+0x302>
.L169:
	ldr	r3, [r7, #4]
 8040b64:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b66:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b68:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b6a:	e0b8      	b.n	8040cde <swi50+0x302>
.L170:
	ldr	r3, [r7, #4]
 8040b6c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b6e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b70:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b72:	e0b4      	b.n	8040cde <swi50+0x302>
.L171:
	ldr	r3, [r7, #4]
 8040b74:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b76:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b78:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b7a:	e0b0      	b.n	8040cde <swi50+0x302>
.L172:
	ldr	r3, [r7, #4]
 8040b7c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b7e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b80:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b82:	e0ac      	b.n	8040cde <swi50+0x302>
.L173:
	ldr	r3, [r7, #4]
 8040b84:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b86:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b88:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b8a:	e0a8      	b.n	8040cde <swi50+0x302>
.L174:
	ldr	r3, [r7, #4]
 8040b8c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b8e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b90:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b92:	e0a4      	b.n	8040cde <swi50+0x302>
.L175:
	ldr	r3, [r7, #4]
 8040b94:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b96:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040b98:	607b      	str	r3, [r7, #4]
	b	.L215
 8040b9a:	e0a0      	b.n	8040cde <swi50+0x302>
.L176:
	ldr	r3, [r7, #4]
 8040b9c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040b9e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040ba0:	607b      	str	r3, [r7, #4]
	b	.L215
 8040ba2:	e09c      	b.n	8040cde <swi50+0x302>
.L177:
	ldr	r3, [r7, #4]
 8040ba4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040ba6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040ba8:	607b      	str	r3, [r7, #4]
	b	.L215
 8040baa:	e098      	b.n	8040cde <swi50+0x302>
.L178:
	ldr	r3, [r7, #4]
 8040bac:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040bae:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040bb0:	607b      	str	r3, [r7, #4]
	b	.L215
 8040bb2:	e094      	b.n	8040cde <swi50+0x302>
.L179:
	ldr	r3, [r7, #4]
 8040bb4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040bb6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040bb8:	607b      	str	r3, [r7, #4]
	b	.L215
 8040bba:	e090      	b.n	8040cde <swi50+0x302>
.L180:
	ldr	r3, [r7, #4]
 8040bbc:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040bbe:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040bc0:	607b      	str	r3, [r7, #4]
	b	.L215
 8040bc2:	e08c      	b.n	8040cde <swi50+0x302>
.L181:
	ldr	r3, [r7, #4]
 8040bc4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040bc6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040bc8:	607b      	str	r3, [r7, #4]
	b	.L215
 8040bca:	e088      	b.n	8040cde <swi50+0x302>
.L182:
	ldr	r3, [r7, #4]
 8040bcc:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040bce:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040bd0:	607b      	str	r3, [r7, #4]
	b	.L215
 8040bd2:	e084      	b.n	8040cde <swi50+0x302>
.L183:
	ldr	r3, [r7, #4]
 8040bd4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040bd6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040bd8:	607b      	str	r3, [r7, #4]
	b	.L215
 8040bda:	e080      	b.n	8040cde <swi50+0x302>
.L184:
	ldr	r3, [r7, #4]
 8040bdc:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040bde:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040be0:	607b      	str	r3, [r7, #4]
	b	.L215
 8040be2:	e07c      	b.n	8040cde <swi50+0x302>
.L185:
	ldr	r3, [r7, #4]
 8040be4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040be6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040be8:	607b      	str	r3, [r7, #4]
	b	.L215
 8040bea:	e078      	b.n	8040cde <swi50+0x302>
.L186:
	ldr	r3, [r7, #4]
 8040bec:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040bee:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040bf0:	607b      	str	r3, [r7, #4]
	b	.L215
 8040bf2:	e074      	b.n	8040cde <swi50+0x302>
.L187:
	ldr	r3, [r7, #4]
 8040bf4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040bf6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040bf8:	607b      	str	r3, [r7, #4]
	b	.L215
 8040bfa:	e070      	b.n	8040cde <swi50+0x302>
.L188:
	ldr	r3, [r7, #4]
 8040bfc:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040bfe:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c00:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c02:	e06c      	b.n	8040cde <swi50+0x302>
.L189:
	ldr	r3, [r7, #4]
 8040c04:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c06:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c08:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c0a:	e068      	b.n	8040cde <swi50+0x302>
.L190:
	ldr	r3, [r7, #4]
 8040c0c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c0e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c10:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c12:	e064      	b.n	8040cde <swi50+0x302>
.L191:
	ldr	r3, [r7, #4]
 8040c14:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c16:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c18:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c1a:	e060      	b.n	8040cde <swi50+0x302>
.L192:
	ldr	r3, [r7, #4]
 8040c1c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c1e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c20:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c22:	e05c      	b.n	8040cde <swi50+0x302>
.L193:
	ldr	r3, [r7, #4]
 8040c24:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c26:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c28:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c2a:	e058      	b.n	8040cde <swi50+0x302>
.L194:
	ldr	r3, [r7, #4]
 8040c2c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c2e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c30:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c32:	e054      	b.n	8040cde <swi50+0x302>
.L195:
	ldr	r3, [r7, #4]
 8040c34:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c36:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c38:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c3a:	e050      	b.n	8040cde <swi50+0x302>
.L196:
	ldr	r3, [r7, #4]
 8040c3c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c3e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c40:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c42:	e04c      	b.n	8040cde <swi50+0x302>
.L197:
	ldr	r3, [r7, #4]
 8040c44:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c46:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c48:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c4a:	e048      	b.n	8040cde <swi50+0x302>
.L198:
	ldr	r3, [r7, #4]
 8040c4c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c4e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c50:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c52:	e044      	b.n	8040cde <swi50+0x302>
.L199:
	ldr	r3, [r7, #4]
 8040c54:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c56:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c58:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c5a:	e040      	b.n	8040cde <swi50+0x302>
.L200:
	ldr	r3, [r7, #4]
 8040c5c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c5e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c60:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c62:	e03c      	b.n	8040cde <swi50+0x302>
.L201:
	ldr	r3, [r7, #4]
 8040c64:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c66:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c68:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c6a:	e038      	b.n	8040cde <swi50+0x302>
.L202:
	ldr	r3, [r7, #4]
 8040c6c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c6e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c70:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c72:	e034      	b.n	8040cde <swi50+0x302>
.L203:
	ldr	r3, [r7, #4]
 8040c74:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c76:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c78:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c7a:	e030      	b.n	8040cde <swi50+0x302>
.L204:
	ldr	r3, [r7, #4]
 8040c7c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c7e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c80:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c82:	e02c      	b.n	8040cde <swi50+0x302>
.L205:
	ldr	r3, [r7, #4]
 8040c84:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c86:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c88:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c8a:	e028      	b.n	8040cde <swi50+0x302>
.L206:
	ldr	r3, [r7, #4]
 8040c8c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c8e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c90:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c92:	e024      	b.n	8040cde <swi50+0x302>
.L207:
	ldr	r3, [r7, #4]
 8040c94:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c96:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040c98:	607b      	str	r3, [r7, #4]
	b	.L215
 8040c9a:	e020      	b.n	8040cde <swi50+0x302>
.L208:
	ldr	r3, [r7, #4]
 8040c9c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040c9e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040ca0:	607b      	str	r3, [r7, #4]
	b	.L215
 8040ca2:	e01c      	b.n	8040cde <swi50+0x302>
.L209:
	ldr	r3, [r7, #4]
 8040ca4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040ca6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040ca8:	607b      	str	r3, [r7, #4]
	b	.L215
 8040caa:	e018      	b.n	8040cde <swi50+0x302>
.L210:
	ldr	r3, [r7, #4]
 8040cac:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040cae:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040cb0:	607b      	str	r3, [r7, #4]
	b	.L215
 8040cb2:	e014      	b.n	8040cde <swi50+0x302>
.L211:
	ldr	r3, [r7, #4]
 8040cb4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040cb6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040cb8:	607b      	str	r3, [r7, #4]
	b	.L215
 8040cba:	e010      	b.n	8040cde <swi50+0x302>
.L212:
	ldr	r3, [r7, #4]
 8040cbc:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040cbe:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040cc0:	607b      	str	r3, [r7, #4]
	b	.L215
 8040cc2:	e00c      	b.n	8040cde <swi50+0x302>
.L213:
	ldr	r3, [r7, #4]
 8040cc4:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040cc6:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040cc8:	607b      	str	r3, [r7, #4]
	b	.L215
 8040cca:	e008      	b.n	8040cde <swi50+0x302>
.L214:
	ldr	r3, [r7, #4]
 8040ccc:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040cce:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040cd0:	607b      	str	r3, [r7, #4]
	b	.L215
 8040cd2:	e004      	b.n	8040cde <swi50+0x302>
.L247:
	bl	SECURE_log_cond_br_taken
 8040cd4:	f000 fd40 	bl	8041758 <__SECURE_log_cond_br_taken_veneer>
.L153:
	ldr	r3, [r7, #4]
 8040cd8:	687b      	ldr	r3, [r7, #4]
	subs	r3, r3, #1
 8040cda:	3b01      	subs	r3, #1
	str	r3, [r7, #4]
 8040cdc:	607b      	str	r3, [r7, #4]
.L215:
	ldr	r3, [r7, #12]
 8040cde:	68fb      	ldr	r3, [r7, #12]
	adds	r3, r3, #1
 8040ce0:	3301      	adds	r3, #1
	str	r3, [r7, #12]
 8040ce2:	60fb      	str	r3, [r7, #12]
.L152:
	ldr	r3, [r7, #12]
 8040ce4:	68fb      	ldr	r3, [r7, #12]
	cmp	r3, #49
 8040ce6:	2b31      	cmp	r3, #49	; 0x31
	ble	.L216
 8040ce8:	f77f ae7f 	ble.w	80409ea <swi50+0xe>
	bl	SECURE_log_cond_br_not_taken
 8040cec:	f000 fd0c 	bl	8041708 <__SECURE_log_cond_br_not_taken_veneer>
	ldr	r3, [r7, #4]
 8040cf0:	687b      	ldr	r3, [r7, #4]
	mov	r0, r3
 8040cf2:	4618      	mov	r0, r3
	adds	r7, r7, #20
 8040cf4:	3714      	adds	r7, #20
	mov	sp, r7
 8040cf6:	46bd      	mov	sp, r7
	@ sp needed
	pop	{r7, lr}
 8040cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	b	SECURE_log_ret
 8040cfc:	f000 bd24 	b.w	8041748 <__SECURE_log_ret_veneer>

08040d00 <swi10>:
	.type	swi10, %function
swi10:
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 1, uses_anonymous_args = 0
	@ link register save eliminated.
	push	{r7, lr}
 8040d00:	b580      	push	{r7, lr}
	sub	sp, sp, #20
 8040d02:	b085      	sub	sp, #20
	add	r7, sp, #0
 8040d04:	af00      	add	r7, sp, #0
	str	r0, [r7, #4]
 8040d06:	6078      	str	r0, [r7, #4]
	movs	r3, #0
 8040d08:	2300      	movs	r3, #0
	str	r3, [r7, #12]
 8040d0a:	60fb      	str	r3, [r7, #12]
	b	.L219
 8040d0c:	e050      	b.n	8040db0 <swi10+0xb0>
.L233:
	bl	SECURE_log_cond_br_taken
 8040d0e:	f000 fd23 	bl	8041758 <__SECURE_log_cond_br_taken_veneer>
	ldr	r3, [r7, #12]
 8040d12:	68fb      	ldr	r3, [r7, #12]
	cmp	r3, #9
 8040d14:	2b09      	cmp	r3, #9
	bhi	.L248
 8040d16:	d843      	bhi.n	8040da0 <swi10+0xa0>
	bl	SECURE_log_cond_br_not_taken
 8040d18:	f000 fcf6 	bl	8041708 <__SECURE_log_cond_br_not_taken_veneer>
	adr	r2, .L222
 8040d1c:	a202      	add	r2, pc, #8	; (adr r2, 8040d28 <swi10+0x28>)
	ldr	r10, [r2, r3, lsl #2]
 8040d1e:	f852 a023 	ldr.w	sl, [r2, r3, lsl #2]
	b	SECURE_log_indr_fwd
 8040d22:	f000 bd09 	b.w	8041738 <__SECURE_log_indr_fwd_veneer>
 8040d26:	bf00      	nop
 8040d28:	08040d51 	.word	0x08040d51
 8040d2c:	08040d59 	.word	0x08040d59
 8040d30:	08040d61 	.word	0x08040d61
 8040d34:	08040d69 	.word	0x08040d69
 8040d38:	08040d71 	.word	0x08040d71
 8040d3c:	08040d79 	.word	0x08040d79
 8040d40:	08040d81 	.word	0x08040d81
 8040d44:	08040d89 	.word	0x08040d89
 8040d48:	08040d91 	.word	0x08040d91
 8040d4c:	08040d99 	.word	0x08040d99
	.word	.L229+1
	.word	.L230+1
	.word	.L231+1
	.p2align 1
.L221:
	ldr	r3, [r7, #4]
 8040d50:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040d52:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040d54:	607b      	str	r3, [r7, #4]
	b	.L232
 8040d56:	e028      	b.n	8040daa <swi10+0xaa>
.L223:
	ldr	r3, [r7, #4]
 8040d58:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040d5a:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040d5c:	607b      	str	r3, [r7, #4]
	b	.L232
 8040d5e:	e024      	b.n	8040daa <swi10+0xaa>
.L224:
	ldr	r3, [r7, #4]
 8040d60:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040d62:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040d64:	607b      	str	r3, [r7, #4]
	b	.L232
 8040d66:	e020      	b.n	8040daa <swi10+0xaa>
.L225:
	ldr	r3, [r7, #4]
 8040d68:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040d6a:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040d6c:	607b      	str	r3, [r7, #4]
	b	.L232
 8040d6e:	e01c      	b.n	8040daa <swi10+0xaa>
.L226:
	ldr	r3, [r7, #4]
 8040d70:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040d72:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040d74:	607b      	str	r3, [r7, #4]
	b	.L232
 8040d76:	e018      	b.n	8040daa <swi10+0xaa>
.L227:
	ldr	r3, [r7, #4]
 8040d78:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040d7a:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040d7c:	607b      	str	r3, [r7, #4]
	b	.L232
 8040d7e:	e014      	b.n	8040daa <swi10+0xaa>
.L228:
	ldr	r3, [r7, #4]
 8040d80:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040d82:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040d84:	607b      	str	r3, [r7, #4]
	b	.L232
 8040d86:	e010      	b.n	8040daa <swi10+0xaa>
.L229:
	ldr	r3, [r7, #4]
 8040d88:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040d8a:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040d8c:	607b      	str	r3, [r7, #4]
	b	.L232
 8040d8e:	e00c      	b.n	8040daa <swi10+0xaa>
.L230:
	ldr	r3, [r7, #4]
 8040d90:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040d92:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040d94:	607b      	str	r3, [r7, #4]
	b	.L232
 8040d96:	e008      	b.n	8040daa <swi10+0xaa>
.L231:
	ldr	r3, [r7, #4]
 8040d98:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040d9a:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040d9c:	607b      	str	r3, [r7, #4]
	b	.L232
 8040d9e:	e004      	b.n	8040daa <swi10+0xaa>
.L248:
	bl	SECURE_log_cond_br_taken
 8040da0:	f000 fcda 	bl	8041758 <__SECURE_log_cond_br_taken_veneer>
.L220:
	ldr	r3, [r7, #4]
 8040da4:	687b      	ldr	r3, [r7, #4]
	subs	r3, r3, #1
 8040da6:	3b01      	subs	r3, #1
	str	r3, [r7, #4]
 8040da8:	607b      	str	r3, [r7, #4]
.L232:
	ldr	r3, [r7, #12]
 8040daa:	68fb      	ldr	r3, [r7, #12]
	adds	r3, r3, #1
 8040dac:	3301      	adds	r3, #1
	str	r3, [r7, #12]
 8040dae:	60fb      	str	r3, [r7, #12]
.L219:
	ldr	r3, [r7, #12]
 8040db0:	68fb      	ldr	r3, [r7, #12]
	cmp	r3, #9
 8040db2:	2b09      	cmp	r3, #9
	ble	.L233
 8040db4:	ddab      	ble.n	8040d0e <swi10+0xe>
	bl	SECURE_log_cond_br_not_taken
 8040db6:	f000 fca7 	bl	8041708 <__SECURE_log_cond_br_not_taken_veneer>
	ldr	r3, [r7, #4]
 8040dba:	687b      	ldr	r3, [r7, #4]
	mov	r0, r3
 8040dbc:	4618      	mov	r0, r3
	adds	r7, r7, #20
 8040dbe:	3714      	adds	r7, #20
	mov	sp, r7
 8040dc0:	46bd      	mov	sp, r7
	@ sp needed
	pop	{r7, lr}
 8040dc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	b	SECURE_log_ret
 8040dc6:	f000 bcbf 	b.w	8041748 <__SECURE_log_ret_veneer>
 8040dca:	bf00      	nop

08040dcc <benchmark>:
	.fpu fpv5-sp-d16
	.type	benchmark, %function
benchmark:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{r7, lr}
 8040dcc:	b580      	push	{r7, lr}
	sub	sp, sp, #8
 8040dce:	b082      	sub	sp, #8
	add	r7, sp, #0
 8040dd0:	af00      	add	r7, sp, #0
	movs	r3, #0
 8040dd2:	2300      	movs	r3, #0
	str	r3, [r7, #4]
 8040dd4:	607b      	str	r3, [r7, #4]
	ldr	r3, [r7, #4]
 8040dd6:	687b      	ldr	r3, [r7, #4]
	mov	r0, r3
 8040dd8:	4618      	mov	r0, r3
	bl	swi10
 8040dda:	f7ff ff91 	bl	8040d00 <swi10>
	mov	r3, r0
 8040dde:	4603      	mov	r3, r0
	str	r3, [r7, #4]
 8040de0:	607b      	str	r3, [r7, #4]
	ldr	r3, [r7, #4]
 8040de2:	687b      	ldr	r3, [r7, #4]
	mov	r0, r3
 8040de4:	4618      	mov	r0, r3
	bl	swi50
 8040de6:	f7ff fdf9 	bl	80409dc <swi50>
	mov	r3, r0
 8040dea:	4603      	mov	r3, r0
	str	r3, [r7, #4]
 8040dec:	607b      	str	r3, [r7, #4]
	ldr	r3, [r7, #4]
 8040dee:	687b      	ldr	r3, [r7, #4]
	mov	r0, r3
 8040df0:	4618      	mov	r0, r3
	bl	swi120
 8040df2:	f7ff facf 	bl	8040394 <swi120>
	mov	r3, r0
 8040df6:	4603      	mov	r3, r0
	str	r3, [r7, #4]
 8040df8:	607b      	str	r3, [r7, #4]
	ldr	r3, [r7, #4]
 8040dfa:	687b      	ldr	r3, [r7, #4]
	mov	r0, r3
 8040dfc:	4618      	mov	r0, r3
	adds	r7, r7, #8
 8040dfe:	3708      	adds	r7, #8
	mov	sp, r7
 8040e00:	46bd      	mov	sp, r7
	@ sp needed
	pop	{r7, lr}
 8040e02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	b	SECURE_log_ret
 8040e06:	f000 bc9f 	b.w	8041748 <__SECURE_log_ret_veneer>

08040e0a <verify_benchmark>:
	.type	verify_benchmark, %function
verify_benchmark:
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 1, uses_anonymous_args = 0
	@ link register save eliminated.
	push	{r7, lr}
 8040e0a:	b580      	push	{r7, lr}
	sub	sp, sp, #20
 8040e0c:	b085      	sub	sp, #20
	add	r7, sp, #0
 8040e0e:	af00      	add	r7, sp, #0
	str	r0, [r7, #4]
 8040e10:	6078      	str	r0, [r7, #4]
	movs	r3, #180
 8040e12:	23b4      	movs	r3, #180	; 0xb4
	str	r3, [r7, #12]
 8040e14:	60fb      	str	r3, [r7, #12]
	ldr	r2, [r7, #4]
 8040e16:	687a      	ldr	r2, [r7, #4]
	ldr	r3, [r7, #12]
 8040e18:	68fb      	ldr	r3, [r7, #12]
	cmp	r2, r3
 8040e1a:	429a      	cmp	r2, r3
	beq	.L249
 8040e1c:	d003      	beq.n	8040e26 <verify_benchmark+0x1c>
	bl	SECURE_log_cond_br_not_taken
 8040e1e:	f000 fc73 	bl	8041708 <__SECURE_log_cond_br_not_taken_veneer>
	movs	r3, #0
 8040e22:	2300      	movs	r3, #0
	b	.L239
 8040e24:	e002      	b.n	8040e2c <verify_benchmark+0x22>
.L249:
	bl	SECURE_log_cond_br_taken
 8040e26:	f000 fc97 	bl	8041758 <__SECURE_log_cond_br_taken_veneer>
.L238:
	movs	r3, #1
 8040e2a:	2301      	movs	r3, #1
.L239:
	mov	r0, r3
 8040e2c:	4618      	mov	r0, r3
	adds	r7, r7, #20
 8040e2e:	3714      	adds	r7, #20
	mov	sp, r7
 8040e30:	46bd      	mov	sp, r7
	@ sp needed
	pop	{r7, lr}
 8040e32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	b	SECURE_log_ret
 8040e36:	f000 bc87 	b.w	8041748 <__SECURE_log_ret_veneer>
	...

08040e3c <application>:
	.fpu fpv5-sp-d16
	.type	application, %function
application:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{r7, lr}
 8040e3c:	b580      	push	{r7, lr}
	add	r7, sp, #0
 8040e3e:	af00      	add	r7, sp, #0
	bl	benchmark
 8040e40:	f7ff ffc4 	bl	8040dcc <benchmark>
	mov	r2, r0
 8040e44:	4602      	mov	r2, r0
	ldr	r3, .L241
 8040e46:	4b0a      	ldr	r3, [pc, #40]	; (8040e70 <application+0x34>)
	str	r2, [r3]
 8040e48:	601a      	str	r2, [r3, #0]
	ldr	r3, .L241
 8040e4a:	4b09      	ldr	r3, [pc, #36]	; (8040e70 <application+0x34>)
	ldr	r3, [r3]
 8040e4c:	681b      	ldr	r3, [r3, #0]
	mov	r0, r3
 8040e4e:	4618      	mov	r0, r3
	bl	verify_benchmark
 8040e50:	f7ff ffdb 	bl	8040e0a <verify_benchmark>
	mov	r2, r0
 8040e54:	4602      	mov	r2, r0
	ldr	r3, .L241+4
 8040e56:	4b07      	ldr	r3, [pc, #28]	; (8040e74 <application+0x38>)
	str	r2, [r3]
 8040e58:	601a      	str	r2, [r3, #0]
	ldr	r3, .L241+4
 8040e5a:	4b06      	ldr	r3, [pc, #24]	; (8040e74 <application+0x38>)
	ldr	r3, [r3]
 8040e5c:	681b      	ldr	r3, [r3, #0]
	mov	r0, r3
 8040e5e:	4618      	mov	r0, r3
	bl	SECURE_record_output_data
 8040e60:	f000 fc62 	bl	8041728 <__SECURE_record_output_data_veneer>
	bl	SECURE_record_output_data
 8040e64:	f000 fc60 	bl	8041728 <__SECURE_record_output_data_veneer>
	pop	{r7, lr}
 8040e68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	b	SECURE_log_ret
 8040e6c:	f000 bc6c 	b.w	8041748 <__SECURE_log_ret_veneer>
 8040e70:	20018438 	.word	0x20018438
 8040e74:	2001843c 	.word	0x2001843c

08040e78 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8040e78:	b580      	push	{r7, lr}
 8040e7a:	b088      	sub	sp, #32
 8040e7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040e7e:	f107 030c 	add.w	r3, r7, #12
 8040e82:	2200      	movs	r2, #0
 8040e84:	601a      	str	r2, [r3, #0]
 8040e86:	605a      	str	r2, [r3, #4]
 8040e88:	609a      	str	r2, [r3, #8]
 8040e8a:	60da      	str	r2, [r3, #12]
 8040e8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040e8e:	4b28      	ldr	r3, [pc, #160]	; (8040f30 <MX_GPIO_Init+0xb8>)
 8040e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040e92:	4a27      	ldr	r2, [pc, #156]	; (8040f30 <MX_GPIO_Init+0xb8>)
 8040e94:	f043 0304 	orr.w	r3, r3, #4
 8040e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040e9a:	4b25      	ldr	r3, [pc, #148]	; (8040f30 <MX_GPIO_Init+0xb8>)
 8040e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040e9e:	f003 0304 	and.w	r3, r3, #4
 8040ea2:	60bb      	str	r3, [r7, #8]
 8040ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040ea6:	4b22      	ldr	r3, [pc, #136]	; (8040f30 <MX_GPIO_Init+0xb8>)
 8040ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040eaa:	4a21      	ldr	r2, [pc, #132]	; (8040f30 <MX_GPIO_Init+0xb8>)
 8040eac:	f043 0301 	orr.w	r3, r3, #1
 8040eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040eb2:	4b1f      	ldr	r3, [pc, #124]	; (8040f30 <MX_GPIO_Init+0xb8>)
 8040eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040eb6:	f003 0301 	and.w	r3, r3, #1
 8040eba:	607b      	str	r3, [r7, #4]
 8040ebc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8040ebe:	2200      	movs	r2, #0
 8040ec0:	2180      	movs	r1, #128	; 0x80
 8040ec2:	481c      	ldr	r0, [pc, #112]	; (8040f34 <MX_GPIO_Init+0xbc>)
 8040ec4:	f000 fbc6 	bl	8041654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8040ec8:	2200      	movs	r2, #0
 8040eca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8040ece:	481a      	ldr	r0, [pc, #104]	; (8040f38 <MX_GPIO_Init+0xc0>)
 8040ed0:	f000 fbc0 	bl	8041654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_BLUE_Pin;
 8040ed4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8040ed8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040eda:	2300      	movs	r3, #0
 8040edc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040ede:	2300      	movs	r3, #0
 8040ee0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_BLUE_GPIO_Port, &GPIO_InitStruct);
 8040ee2:	f107 030c 	add.w	r3, r7, #12
 8040ee6:	4619      	mov	r1, r3
 8040ee8:	4812      	ldr	r0, [pc, #72]	; (8040f34 <MX_GPIO_Init+0xbc>)
 8040eea:	f000 fa33 	bl	8041354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8040eee:	2380      	movs	r3, #128	; 0x80
 8040ef0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040ef2:	2301      	movs	r3, #1
 8040ef4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040ef6:	2300      	movs	r3, #0
 8040ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040efa:	2300      	movs	r3, #0
 8040efc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8040efe:	f107 030c 	add.w	r3, r7, #12
 8040f02:	4619      	mov	r1, r3
 8040f04:	480b      	ldr	r0, [pc, #44]	; (8040f34 <MX_GPIO_Init+0xbc>)
 8040f06:	f000 fa25 	bl	8041354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8040f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8040f0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040f10:	2301      	movs	r3, #1
 8040f12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040f14:	2300      	movs	r3, #0
 8040f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040f18:	2300      	movs	r3, #0
 8040f1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8040f1c:	f107 030c 	add.w	r3, r7, #12
 8040f20:	4619      	mov	r1, r3
 8040f22:	4805      	ldr	r0, [pc, #20]	; (8040f38 <MX_GPIO_Init+0xc0>)
 8040f24:	f000 fa16 	bl	8041354 <HAL_GPIO_Init>

}
 8040f28:	bf00      	nop
 8040f2a:	3720      	adds	r7, #32
 8040f2c:	46bd      	mov	sp, r7
 8040f2e:	bd80      	pop	{r7, pc}
 8040f30:	40021000 	.word	0x40021000
 8040f34:	42020800 	.word	0x42020800
 8040f38:	42020000 	.word	0x42020000

08040f3c <SecureFault_Callback>:
  *(volatile uint32_t *)0x30000000UL = 0;
}

//secure fault generated by IDAU/SAU check */
void SecureFault_Callback(void)
{
 8040f3c:	b580      	push	{r7, lr}
 8040f3e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8040f40:	2201      	movs	r2, #1
 8040f42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8040f46:	4803      	ldr	r0, [pc, #12]	; (8040f54 <SecureFault_Callback+0x18>)
 8040f48:	f000 fb84 	bl	8041654 <HAL_GPIO_WritePin>
  Error_Handler();
 8040f4c:	f000 f82e 	bl	8040fac <Error_Handler>
}
 8040f50:	bf00      	nop
 8040f52:	bd80      	pop	{r7, pc}
 8040f54:	42020000 	.word	0x42020000

08040f58 <SecureError_Callback>:

//secure error generated by GTZC check
void SecureError_Callback(void)
{
 8040f58:	b580      	push	{r7, lr}
 8040f5a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8040f5c:	2201      	movs	r2, #1
 8040f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8040f62:	4803      	ldr	r0, [pc, #12]	; (8040f70 <SecureError_Callback+0x18>)
 8040f64:	f000 fb76 	bl	8041654 <HAL_GPIO_WritePin>
  Error_Handler();
 8040f68:	f000 f820 	bl	8040fac <Error_Handler>
}
 8040f6c:	bf00      	nop
 8040f6e:	bd80      	pop	{r7, pc}
 8040f70:	42020000 	.word	0x42020000

08040f74 <main>:
  */

extern char input[33];
uint32_t c;
int main(void)
{
 8040f74:	b580      	push	{r7, lr}
 8040f76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040f78:	f000 f89d 	bl	80410b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8040f7c:	f7ff ff7c 	bl	8040e78 <MX_GPIO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  //register error callbacks
  SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
 8040f80:	4907      	ldr	r1, [pc, #28]	; (8040fa0 <main+0x2c>)
 8040f82:	2000      	movs	r0, #0
 8040f84:	f000 fbc8 	bl	8041718 <__SECURE_RegisterCallback_veneer>
  SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
 8040f88:	4906      	ldr	r1, [pc, #24]	; (8040fa4 <main+0x30>)
 8040f8a:	2001      	movs	r0, #1
 8040f8c:	f000 fbc4 	bl	8041718 <__SECURE_RegisterCallback_veneer>
  SECURE_RegisterCallback(ATTESTATION_APP_ID,(void*)&application);
 8040f90:	4905      	ldr	r1, [pc, #20]	; (8040fa8 <main+0x34>)
 8040f92:	2002      	movs	r0, #2
 8040f94:	f000 fbc0 	bl	8041718 <__SECURE_RegisterCallback_veneer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SECURE_run_attestation_wait_mode();
 8040f98:	f000 fba6 	bl	80416e8 <__SECURE_run_attestation_wait_mode_veneer>
 8040f9c:	e7fc      	b.n	8040f98 <main+0x24>
 8040f9e:	bf00      	nop
 8040fa0:	08040f3d 	.word	0x08040f3d
 8040fa4:	08040f59 	.word	0x08040f59
 8040fa8:	08040e3d 	.word	0x08040e3d

08040fac <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void (*func_ptr)(void) = &empty;
void Error_Handler(void)
{
 8040fac:	b580      	push	{r7, lr}
 8040fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040fb0:	b672      	cpsid	i
}
 8040fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  func_ptr();
 8040fb4:	4b01      	ldr	r3, [pc, #4]	; (8040fbc <Error_Handler+0x10>)
 8040fb6:	681b      	ldr	r3, [r3, #0]
 8040fb8:	4798      	blx	r3
  while (1)
 8040fba:	e7fe      	b.n	8040fba <Error_Handler+0xe>
 8040fbc:	20018000 	.word	0x20018000

08040fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040fc0:	b480      	push	{r7}
 8040fc2:	b083      	sub	sp, #12
 8040fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040fc6:	4b0f      	ldr	r3, [pc, #60]	; (8041004 <HAL_MspInit+0x44>)
 8040fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040fca:	4a0e      	ldr	r2, [pc, #56]	; (8041004 <HAL_MspInit+0x44>)
 8040fcc:	f043 0301 	orr.w	r3, r3, #1
 8040fd0:	6613      	str	r3, [r2, #96]	; 0x60
 8040fd2:	4b0c      	ldr	r3, [pc, #48]	; (8041004 <HAL_MspInit+0x44>)
 8040fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040fd6:	f003 0301 	and.w	r3, r3, #1
 8040fda:	607b      	str	r3, [r7, #4]
 8040fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8040fde:	4b09      	ldr	r3, [pc, #36]	; (8041004 <HAL_MspInit+0x44>)
 8040fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040fe2:	4a08      	ldr	r2, [pc, #32]	; (8041004 <HAL_MspInit+0x44>)
 8040fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8040fea:	4b06      	ldr	r3, [pc, #24]	; (8041004 <HAL_MspInit+0x44>)
 8040fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040ff2:	603b      	str	r3, [r7, #0]
 8040ff4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040ff6:	bf00      	nop
 8040ff8:	370c      	adds	r7, #12
 8040ffa:	46bd      	mov	sp, r7
 8040ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041000:	4770      	bx	lr
 8041002:	bf00      	nop
 8041004:	40021000 	.word	0x40021000

08041008 <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8041008:	b480      	push	{r7}
 804100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 804100c:	e7fe      	b.n	804100c <MemManage_Handler+0x4>

0804100e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 804100e:	b480      	push	{r7}
 8041010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8041012:	e7fe      	b.n	8041012 <UsageFault_Handler+0x4>

08041014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8041014:	b480      	push	{r7}
 8041016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8041018:	bf00      	nop
 804101a:	46bd      	mov	sp, r7
 804101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041020:	4770      	bx	lr

08041022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8041022:	b480      	push	{r7}
 8041024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8041026:	bf00      	nop
 8041028:	46bd      	mov	sp, r7
 804102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804102e:	4770      	bx	lr

08041030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8041030:	b580      	push	{r7, lr}
 8041032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8041034:	f000 f896 	bl	8041164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8041038:	bf00      	nop
 804103a:	bd80      	pop	{r7, pc}

0804103c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 804103c:	b480      	push	{r7}
 804103e:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8041040:	bf00      	nop
 8041042:	46bd      	mov	sp, r7
 8041044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041048:	4770      	bx	lr
	...

0804104c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 804104c:	b580      	push	{r7, lr}
 804104e:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 8041050:	f000 fb52 	bl	80416f8 <__SECURE_SystemCoreClockUpdate_veneer>
 8041054:	4603      	mov	r3, r0
 8041056:	4a02      	ldr	r2, [pc, #8]	; (8041060 <SystemCoreClockUpdate+0x14>)
 8041058:	6013      	str	r3, [r2, #0]
}
 804105a:	bf00      	nop
 804105c:	bd80      	pop	{r7, pc}
 804105e:	bf00      	nop
 8041060:	20018004 	.word	0x20018004

08041064 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8041064:	f8df d034 	ldr.w	sp, [pc, #52]	; 804109c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8041068:	f7ff ffe8 	bl	804103c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 804106c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 804106e:	e003      	b.n	8041078 <LoopCopyDataInit>

08041070 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8041070:	4b0b      	ldr	r3, [pc, #44]	; (80410a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8041072:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8041074:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8041076:	3104      	adds	r1, #4

08041078 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8041078:	480a      	ldr	r0, [pc, #40]	; (80410a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 804107a:	4b0b      	ldr	r3, [pc, #44]	; (80410a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 804107c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 804107e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8041080:	d3f6      	bcc.n	8041070 <CopyDataInit>
	ldr	r2, =_sbss
 8041082:	4a0a      	ldr	r2, [pc, #40]	; (80410ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8041084:	e002      	b.n	804108c <LoopFillZerobss>

08041086 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8041086:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8041088:	f842 3b04 	str.w	r3, [r2], #4

0804108c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 804108c:	4b08      	ldr	r3, [pc, #32]	; (80410b0 <LoopForever+0x16>)
	cmp	r2, r3
 804108e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8041090:	d3f9      	bcc.n	8041086 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8041092:	f000 faf7 	bl	8041684 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8041096:	f7ff ff6d 	bl	8040f74 <main>

0804109a <LoopForever>:

LoopForever:
    b LoopForever
 804109a:	e7fe      	b.n	804109a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 804109c:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 80410a0:	08041770 	.word	0x08041770
	ldr	r0, =_sdata
 80410a4:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 80410a8:	20018010 	.word	0x20018010
	ldr	r2, =_sbss
 80410ac:	20018010 	.word	0x20018010
	ldr	r3, = _ebss
 80410b0:	20018440 	.word	0x20018440

080410b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80410b4:	e7fe      	b.n	80410b4 <ADC1_2_IRQHandler>

080410b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80410b6:	b580      	push	{r7, lr}
 80410b8:	b082      	sub	sp, #8
 80410ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80410bc:	2300      	movs	r3, #0
 80410be:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80410c0:	2004      	movs	r0, #4
 80410c2:	f000 f915 	bl	80412f0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80410c6:	f7ff ffc1 	bl	804104c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80410ca:	2007      	movs	r0, #7
 80410cc:	f000 f80e 	bl	80410ec <HAL_InitTick>
 80410d0:	4603      	mov	r3, r0
 80410d2:	2b00      	cmp	r3, #0
 80410d4:	d002      	beq.n	80410dc <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80410d6:	2301      	movs	r3, #1
 80410d8:	71fb      	strb	r3, [r7, #7]
 80410da:	e001      	b.n	80410e0 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80410dc:	f7ff ff70 	bl	8040fc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80410e0:	79fb      	ldrb	r3, [r7, #7]
}
 80410e2:	4618      	mov	r0, r3
 80410e4:	3708      	adds	r7, #8
 80410e6:	46bd      	mov	sp, r7
 80410e8:	bd80      	pop	{r7, pc}
	...

080410ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80410ec:	b580      	push	{r7, lr}
 80410ee:	b084      	sub	sp, #16
 80410f0:	af00      	add	r7, sp, #0
 80410f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80410f4:	2300      	movs	r3, #0
 80410f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80410f8:	4b17      	ldr	r3, [pc, #92]	; (8041158 <HAL_InitTick+0x6c>)
 80410fa:	781b      	ldrb	r3, [r3, #0]
 80410fc:	2b00      	cmp	r3, #0
 80410fe:	d023      	beq.n	8041148 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8041100:	4b16      	ldr	r3, [pc, #88]	; (804115c <HAL_InitTick+0x70>)
 8041102:	681a      	ldr	r2, [r3, #0]
 8041104:	4b14      	ldr	r3, [pc, #80]	; (8041158 <HAL_InitTick+0x6c>)
 8041106:	781b      	ldrb	r3, [r3, #0]
 8041108:	4619      	mov	r1, r3
 804110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804110e:	fbb3 f3f1 	udiv	r3, r3, r1
 8041112:	fbb2 f3f3 	udiv	r3, r2, r3
 8041116:	4618      	mov	r0, r3
 8041118:	f000 f90f 	bl	804133a <HAL_SYSTICK_Config>
 804111c:	4603      	mov	r3, r0
 804111e:	2b00      	cmp	r3, #0
 8041120:	d10f      	bne.n	8041142 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8041122:	687b      	ldr	r3, [r7, #4]
 8041124:	2b07      	cmp	r3, #7
 8041126:	d809      	bhi.n	804113c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8041128:	2200      	movs	r2, #0
 804112a:	6879      	ldr	r1, [r7, #4]
 804112c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8041130:	f000 f8e9 	bl	8041306 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8041134:	4a0a      	ldr	r2, [pc, #40]	; (8041160 <HAL_InitTick+0x74>)
 8041136:	687b      	ldr	r3, [r7, #4]
 8041138:	6013      	str	r3, [r2, #0]
 804113a:	e007      	b.n	804114c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 804113c:	2301      	movs	r3, #1
 804113e:	73fb      	strb	r3, [r7, #15]
 8041140:	e004      	b.n	804114c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8041142:	2301      	movs	r3, #1
 8041144:	73fb      	strb	r3, [r7, #15]
 8041146:	e001      	b.n	804114c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8041148:	2301      	movs	r3, #1
 804114a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 804114c:	7bfb      	ldrb	r3, [r7, #15]
}
 804114e:	4618      	mov	r0, r3
 8041150:	3710      	adds	r7, #16
 8041152:	46bd      	mov	sp, r7
 8041154:	bd80      	pop	{r7, pc}
 8041156:	bf00      	nop
 8041158:	2001800c 	.word	0x2001800c
 804115c:	20018004 	.word	0x20018004
 8041160:	20018008 	.word	0x20018008

08041164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8041164:	b480      	push	{r7}
 8041166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8041168:	4b06      	ldr	r3, [pc, #24]	; (8041184 <HAL_IncTick+0x20>)
 804116a:	781b      	ldrb	r3, [r3, #0]
 804116c:	461a      	mov	r2, r3
 804116e:	4b06      	ldr	r3, [pc, #24]	; (8041188 <HAL_IncTick+0x24>)
 8041170:	681b      	ldr	r3, [r3, #0]
 8041172:	4413      	add	r3, r2
 8041174:	4a04      	ldr	r2, [pc, #16]	; (8041188 <HAL_IncTick+0x24>)
 8041176:	6013      	str	r3, [r2, #0]
}
 8041178:	bf00      	nop
 804117a:	46bd      	mov	sp, r7
 804117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041180:	4770      	bx	lr
 8041182:	bf00      	nop
 8041184:	2001800c 	.word	0x2001800c
 8041188:	20018434 	.word	0x20018434

0804118c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 804118c:	b480      	push	{r7}
 804118e:	b085      	sub	sp, #20
 8041190:	af00      	add	r7, sp, #0
 8041192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8041194:	687b      	ldr	r3, [r7, #4]
 8041196:	f003 0307 	and.w	r3, r3, #7
 804119a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 804119c:	4b0c      	ldr	r3, [pc, #48]	; (80411d0 <__NVIC_SetPriorityGrouping+0x44>)
 804119e:	68db      	ldr	r3, [r3, #12]
 80411a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80411a2:	68ba      	ldr	r2, [r7, #8]
 80411a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80411a8:	4013      	ands	r3, r2
 80411aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80411ac:	68fb      	ldr	r3, [r7, #12]
 80411ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80411b0:	68bb      	ldr	r3, [r7, #8]
 80411b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80411b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80411b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80411bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80411be:	4a04      	ldr	r2, [pc, #16]	; (80411d0 <__NVIC_SetPriorityGrouping+0x44>)
 80411c0:	68bb      	ldr	r3, [r7, #8]
 80411c2:	60d3      	str	r3, [r2, #12]
}
 80411c4:	bf00      	nop
 80411c6:	3714      	adds	r7, #20
 80411c8:	46bd      	mov	sp, r7
 80411ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80411ce:	4770      	bx	lr
 80411d0:	e000ed00 	.word	0xe000ed00

080411d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80411d4:	b480      	push	{r7}
 80411d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80411d8:	4b04      	ldr	r3, [pc, #16]	; (80411ec <__NVIC_GetPriorityGrouping+0x18>)
 80411da:	68db      	ldr	r3, [r3, #12]
 80411dc:	0a1b      	lsrs	r3, r3, #8
 80411de:	f003 0307 	and.w	r3, r3, #7
}
 80411e2:	4618      	mov	r0, r3
 80411e4:	46bd      	mov	sp, r7
 80411e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80411ea:	4770      	bx	lr
 80411ec:	e000ed00 	.word	0xe000ed00

080411f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80411f0:	b480      	push	{r7}
 80411f2:	b083      	sub	sp, #12
 80411f4:	af00      	add	r7, sp, #0
 80411f6:	4603      	mov	r3, r0
 80411f8:	6039      	str	r1, [r7, #0]
 80411fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80411fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041200:	2b00      	cmp	r3, #0
 8041202:	db0a      	blt.n	804121a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041204:	683b      	ldr	r3, [r7, #0]
 8041206:	b2da      	uxtb	r2, r3
 8041208:	490c      	ldr	r1, [pc, #48]	; (804123c <__NVIC_SetPriority+0x4c>)
 804120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804120e:	0152      	lsls	r2, r2, #5
 8041210:	b2d2      	uxtb	r2, r2
 8041212:	440b      	add	r3, r1
 8041214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8041218:	e00a      	b.n	8041230 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804121a:	683b      	ldr	r3, [r7, #0]
 804121c:	b2da      	uxtb	r2, r3
 804121e:	4908      	ldr	r1, [pc, #32]	; (8041240 <__NVIC_SetPriority+0x50>)
 8041220:	79fb      	ldrb	r3, [r7, #7]
 8041222:	f003 030f 	and.w	r3, r3, #15
 8041226:	3b04      	subs	r3, #4
 8041228:	0152      	lsls	r2, r2, #5
 804122a:	b2d2      	uxtb	r2, r2
 804122c:	440b      	add	r3, r1
 804122e:	761a      	strb	r2, [r3, #24]
}
 8041230:	bf00      	nop
 8041232:	370c      	adds	r7, #12
 8041234:	46bd      	mov	sp, r7
 8041236:	f85d 7b04 	ldr.w	r7, [sp], #4
 804123a:	4770      	bx	lr
 804123c:	e000e100 	.word	0xe000e100
 8041240:	e000ed00 	.word	0xe000ed00

08041244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8041244:	b480      	push	{r7}
 8041246:	b089      	sub	sp, #36	; 0x24
 8041248:	af00      	add	r7, sp, #0
 804124a:	60f8      	str	r0, [r7, #12]
 804124c:	60b9      	str	r1, [r7, #8]
 804124e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8041250:	68fb      	ldr	r3, [r7, #12]
 8041252:	f003 0307 	and.w	r3, r3, #7
 8041256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8041258:	69fb      	ldr	r3, [r7, #28]
 804125a:	f1c3 0307 	rsb	r3, r3, #7
 804125e:	2b03      	cmp	r3, #3
 8041260:	bf28      	it	cs
 8041262:	2303      	movcs	r3, #3
 8041264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8041266:	69fb      	ldr	r3, [r7, #28]
 8041268:	3303      	adds	r3, #3
 804126a:	2b06      	cmp	r3, #6
 804126c:	d902      	bls.n	8041274 <NVIC_EncodePriority+0x30>
 804126e:	69fb      	ldr	r3, [r7, #28]
 8041270:	3b04      	subs	r3, #4
 8041272:	e000      	b.n	8041276 <NVIC_EncodePriority+0x32>
 8041274:	2300      	movs	r3, #0
 8041276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8041278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804127c:	69bb      	ldr	r3, [r7, #24]
 804127e:	fa02 f303 	lsl.w	r3, r2, r3
 8041282:	43da      	mvns	r2, r3
 8041284:	68bb      	ldr	r3, [r7, #8]
 8041286:	401a      	ands	r2, r3
 8041288:	697b      	ldr	r3, [r7, #20]
 804128a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 804128c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8041290:	697b      	ldr	r3, [r7, #20]
 8041292:	fa01 f303 	lsl.w	r3, r1, r3
 8041296:	43d9      	mvns	r1, r3
 8041298:	687b      	ldr	r3, [r7, #4]
 804129a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 804129c:	4313      	orrs	r3, r2
         );
}
 804129e:	4618      	mov	r0, r3
 80412a0:	3724      	adds	r7, #36	; 0x24
 80412a2:	46bd      	mov	sp, r7
 80412a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80412a8:	4770      	bx	lr
	...

080412ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80412ac:	b580      	push	{r7, lr}
 80412ae:	b082      	sub	sp, #8
 80412b0:	af00      	add	r7, sp, #0
 80412b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80412b4:	687b      	ldr	r3, [r7, #4]
 80412b6:	3b01      	subs	r3, #1
 80412b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80412bc:	d301      	bcc.n	80412c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80412be:	2301      	movs	r3, #1
 80412c0:	e00f      	b.n	80412e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80412c2:	4a0a      	ldr	r2, [pc, #40]	; (80412ec <SysTick_Config+0x40>)
 80412c4:	687b      	ldr	r3, [r7, #4]
 80412c6:	3b01      	subs	r3, #1
 80412c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80412ca:	2107      	movs	r1, #7
 80412cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80412d0:	f7ff ff8e 	bl	80411f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80412d4:	4b05      	ldr	r3, [pc, #20]	; (80412ec <SysTick_Config+0x40>)
 80412d6:	2200      	movs	r2, #0
 80412d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80412da:	4b04      	ldr	r3, [pc, #16]	; (80412ec <SysTick_Config+0x40>)
 80412dc:	2207      	movs	r2, #7
 80412de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80412e0:	2300      	movs	r3, #0
}
 80412e2:	4618      	mov	r0, r3
 80412e4:	3708      	adds	r7, #8
 80412e6:	46bd      	mov	sp, r7
 80412e8:	bd80      	pop	{r7, pc}
 80412ea:	bf00      	nop
 80412ec:	e000e010 	.word	0xe000e010

080412f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80412f0:	b580      	push	{r7, lr}
 80412f2:	b082      	sub	sp, #8
 80412f4:	af00      	add	r7, sp, #0
 80412f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80412f8:	6878      	ldr	r0, [r7, #4]
 80412fa:	f7ff ff47 	bl	804118c <__NVIC_SetPriorityGrouping>
}
 80412fe:	bf00      	nop
 8041300:	3708      	adds	r7, #8
 8041302:	46bd      	mov	sp, r7
 8041304:	bd80      	pop	{r7, pc}

08041306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8041306:	b580      	push	{r7, lr}
 8041308:	b086      	sub	sp, #24
 804130a:	af00      	add	r7, sp, #0
 804130c:	4603      	mov	r3, r0
 804130e:	60b9      	str	r1, [r7, #8]
 8041310:	607a      	str	r2, [r7, #4]
 8041312:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8041314:	f7ff ff5e 	bl	80411d4 <__NVIC_GetPriorityGrouping>
 8041318:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 804131a:	687a      	ldr	r2, [r7, #4]
 804131c:	68b9      	ldr	r1, [r7, #8]
 804131e:	6978      	ldr	r0, [r7, #20]
 8041320:	f7ff ff90 	bl	8041244 <NVIC_EncodePriority>
 8041324:	4602      	mov	r2, r0
 8041326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804132a:	4611      	mov	r1, r2
 804132c:	4618      	mov	r0, r3
 804132e:	f7ff ff5f 	bl	80411f0 <__NVIC_SetPriority>
}
 8041332:	bf00      	nop
 8041334:	3718      	adds	r7, #24
 8041336:	46bd      	mov	sp, r7
 8041338:	bd80      	pop	{r7, pc}

0804133a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 804133a:	b580      	push	{r7, lr}
 804133c:	b082      	sub	sp, #8
 804133e:	af00      	add	r7, sp, #0
 8041340:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8041342:	6878      	ldr	r0, [r7, #4]
 8041344:	f7ff ffb2 	bl	80412ac <SysTick_Config>
 8041348:	4603      	mov	r3, r0
}
 804134a:	4618      	mov	r0, r3
 804134c:	3708      	adds	r7, #8
 804134e:	46bd      	mov	sp, r7
 8041350:	bd80      	pop	{r7, pc}
	...

08041354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8041354:	b480      	push	{r7}
 8041356:	b087      	sub	sp, #28
 8041358:	af00      	add	r7, sp, #0
 804135a:	6078      	str	r0, [r7, #4]
 804135c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 804135e:	2300      	movs	r3, #0
 8041360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8041362:	e158      	b.n	8041616 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8041364:	683b      	ldr	r3, [r7, #0]
 8041366:	681a      	ldr	r2, [r3, #0]
 8041368:	2101      	movs	r1, #1
 804136a:	697b      	ldr	r3, [r7, #20]
 804136c:	fa01 f303 	lsl.w	r3, r1, r3
 8041370:	4013      	ands	r3, r2
 8041372:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8041374:	68fb      	ldr	r3, [r7, #12]
 8041376:	2b00      	cmp	r3, #0
 8041378:	f000 814a 	beq.w	8041610 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 804137c:	683b      	ldr	r3, [r7, #0]
 804137e:	685b      	ldr	r3, [r3, #4]
 8041380:	2b01      	cmp	r3, #1
 8041382:	d00b      	beq.n	804139c <HAL_GPIO_Init+0x48>
 8041384:	683b      	ldr	r3, [r7, #0]
 8041386:	685b      	ldr	r3, [r3, #4]
 8041388:	2b02      	cmp	r3, #2
 804138a:	d007      	beq.n	804139c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 804138c:	683b      	ldr	r3, [r7, #0]
 804138e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8041390:	2b11      	cmp	r3, #17
 8041392:	d003      	beq.n	804139c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8041394:	683b      	ldr	r3, [r7, #0]
 8041396:	685b      	ldr	r3, [r3, #4]
 8041398:	2b12      	cmp	r3, #18
 804139a:	d130      	bne.n	80413fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 804139c:	687b      	ldr	r3, [r7, #4]
 804139e:	689b      	ldr	r3, [r3, #8]
 80413a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80413a2:	697b      	ldr	r3, [r7, #20]
 80413a4:	005b      	lsls	r3, r3, #1
 80413a6:	2203      	movs	r2, #3
 80413a8:	fa02 f303 	lsl.w	r3, r2, r3
 80413ac:	43db      	mvns	r3, r3
 80413ae:	693a      	ldr	r2, [r7, #16]
 80413b0:	4013      	ands	r3, r2
 80413b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80413b4:	683b      	ldr	r3, [r7, #0]
 80413b6:	68da      	ldr	r2, [r3, #12]
 80413b8:	697b      	ldr	r3, [r7, #20]
 80413ba:	005b      	lsls	r3, r3, #1
 80413bc:	fa02 f303 	lsl.w	r3, r2, r3
 80413c0:	693a      	ldr	r2, [r7, #16]
 80413c2:	4313      	orrs	r3, r2
 80413c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80413c6:	687b      	ldr	r3, [r7, #4]
 80413c8:	693a      	ldr	r2, [r7, #16]
 80413ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80413cc:	687b      	ldr	r3, [r7, #4]
 80413ce:	685b      	ldr	r3, [r3, #4]
 80413d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80413d2:	2201      	movs	r2, #1
 80413d4:	697b      	ldr	r3, [r7, #20]
 80413d6:	fa02 f303 	lsl.w	r3, r2, r3
 80413da:	43db      	mvns	r3, r3
 80413dc:	693a      	ldr	r2, [r7, #16]
 80413de:	4013      	ands	r3, r2
 80413e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80413e2:	683b      	ldr	r3, [r7, #0]
 80413e4:	685b      	ldr	r3, [r3, #4]
 80413e6:	091b      	lsrs	r3, r3, #4
 80413e8:	f003 0201 	and.w	r2, r3, #1
 80413ec:	697b      	ldr	r3, [r7, #20]
 80413ee:	fa02 f303 	lsl.w	r3, r2, r3
 80413f2:	693a      	ldr	r2, [r7, #16]
 80413f4:	4313      	orrs	r3, r2
 80413f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80413f8:	687b      	ldr	r3, [r7, #4]
 80413fa:	693a      	ldr	r2, [r7, #16]
 80413fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80413fe:	687b      	ldr	r3, [r7, #4]
 8041400:	68db      	ldr	r3, [r3, #12]
 8041402:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8041404:	697b      	ldr	r3, [r7, #20]
 8041406:	005b      	lsls	r3, r3, #1
 8041408:	2203      	movs	r2, #3
 804140a:	fa02 f303 	lsl.w	r3, r2, r3
 804140e:	43db      	mvns	r3, r3
 8041410:	693a      	ldr	r2, [r7, #16]
 8041412:	4013      	ands	r3, r2
 8041414:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8041416:	683b      	ldr	r3, [r7, #0]
 8041418:	689a      	ldr	r2, [r3, #8]
 804141a:	697b      	ldr	r3, [r7, #20]
 804141c:	005b      	lsls	r3, r3, #1
 804141e:	fa02 f303 	lsl.w	r3, r2, r3
 8041422:	693a      	ldr	r2, [r7, #16]
 8041424:	4313      	orrs	r3, r2
 8041426:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8041428:	687b      	ldr	r3, [r7, #4]
 804142a:	693a      	ldr	r2, [r7, #16]
 804142c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 804142e:	683b      	ldr	r3, [r7, #0]
 8041430:	685b      	ldr	r3, [r3, #4]
 8041432:	2b02      	cmp	r3, #2
 8041434:	d003      	beq.n	804143e <HAL_GPIO_Init+0xea>
 8041436:	683b      	ldr	r3, [r7, #0]
 8041438:	685b      	ldr	r3, [r3, #4]
 804143a:	2b12      	cmp	r3, #18
 804143c:	d123      	bne.n	8041486 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 804143e:	697b      	ldr	r3, [r7, #20]
 8041440:	08da      	lsrs	r2, r3, #3
 8041442:	687b      	ldr	r3, [r7, #4]
 8041444:	3208      	adds	r2, #8
 8041446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804144a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 804144c:	697b      	ldr	r3, [r7, #20]
 804144e:	f003 0307 	and.w	r3, r3, #7
 8041452:	009b      	lsls	r3, r3, #2
 8041454:	220f      	movs	r2, #15
 8041456:	fa02 f303 	lsl.w	r3, r2, r3
 804145a:	43db      	mvns	r3, r3
 804145c:	693a      	ldr	r2, [r7, #16]
 804145e:	4013      	ands	r3, r2
 8041460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8041462:	683b      	ldr	r3, [r7, #0]
 8041464:	691a      	ldr	r2, [r3, #16]
 8041466:	697b      	ldr	r3, [r7, #20]
 8041468:	f003 0307 	and.w	r3, r3, #7
 804146c:	009b      	lsls	r3, r3, #2
 804146e:	fa02 f303 	lsl.w	r3, r2, r3
 8041472:	693a      	ldr	r2, [r7, #16]
 8041474:	4313      	orrs	r3, r2
 8041476:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8041478:	697b      	ldr	r3, [r7, #20]
 804147a:	08da      	lsrs	r2, r3, #3
 804147c:	687b      	ldr	r3, [r7, #4]
 804147e:	3208      	adds	r2, #8
 8041480:	6939      	ldr	r1, [r7, #16]
 8041482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8041486:	687b      	ldr	r3, [r7, #4]
 8041488:	681b      	ldr	r3, [r3, #0]
 804148a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 804148c:	697b      	ldr	r3, [r7, #20]
 804148e:	005b      	lsls	r3, r3, #1
 8041490:	2203      	movs	r2, #3
 8041492:	fa02 f303 	lsl.w	r3, r2, r3
 8041496:	43db      	mvns	r3, r3
 8041498:	693a      	ldr	r2, [r7, #16]
 804149a:	4013      	ands	r3, r2
 804149c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 804149e:	683b      	ldr	r3, [r7, #0]
 80414a0:	685b      	ldr	r3, [r3, #4]
 80414a2:	f003 0203 	and.w	r2, r3, #3
 80414a6:	697b      	ldr	r3, [r7, #20]
 80414a8:	005b      	lsls	r3, r3, #1
 80414aa:	fa02 f303 	lsl.w	r3, r2, r3
 80414ae:	693a      	ldr	r2, [r7, #16]
 80414b0:	4313      	orrs	r3, r2
 80414b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80414b4:	687b      	ldr	r3, [r7, #4]
 80414b6:	693a      	ldr	r2, [r7, #16]
 80414b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80414ba:	683b      	ldr	r3, [r7, #0]
 80414bc:	685b      	ldr	r3, [r3, #4]
 80414be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80414c2:	2b00      	cmp	r3, #0
 80414c4:	f000 80a4 	beq.w	8041610 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80414c8:	4a5a      	ldr	r2, [pc, #360]	; (8041634 <HAL_GPIO_Init+0x2e0>)
 80414ca:	697b      	ldr	r3, [r7, #20]
 80414cc:	089b      	lsrs	r3, r3, #2
 80414ce:	3318      	adds	r3, #24
 80414d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80414d4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80414d6:	697b      	ldr	r3, [r7, #20]
 80414d8:	f003 0303 	and.w	r3, r3, #3
 80414dc:	00db      	lsls	r3, r3, #3
 80414de:	220f      	movs	r2, #15
 80414e0:	fa02 f303 	lsl.w	r3, r2, r3
 80414e4:	43db      	mvns	r3, r3
 80414e6:	693a      	ldr	r2, [r7, #16]
 80414e8:	4013      	ands	r3, r2
 80414ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80414ec:	687b      	ldr	r3, [r7, #4]
 80414ee:	4a52      	ldr	r2, [pc, #328]	; (8041638 <HAL_GPIO_Init+0x2e4>)
 80414f0:	4293      	cmp	r3, r2
 80414f2:	d025      	beq.n	8041540 <HAL_GPIO_Init+0x1ec>
 80414f4:	687b      	ldr	r3, [r7, #4]
 80414f6:	4a51      	ldr	r2, [pc, #324]	; (804163c <HAL_GPIO_Init+0x2e8>)
 80414f8:	4293      	cmp	r3, r2
 80414fa:	d01f      	beq.n	804153c <HAL_GPIO_Init+0x1e8>
 80414fc:	687b      	ldr	r3, [r7, #4]
 80414fe:	4a50      	ldr	r2, [pc, #320]	; (8041640 <HAL_GPIO_Init+0x2ec>)
 8041500:	4293      	cmp	r3, r2
 8041502:	d019      	beq.n	8041538 <HAL_GPIO_Init+0x1e4>
 8041504:	687b      	ldr	r3, [r7, #4]
 8041506:	4a4f      	ldr	r2, [pc, #316]	; (8041644 <HAL_GPIO_Init+0x2f0>)
 8041508:	4293      	cmp	r3, r2
 804150a:	d013      	beq.n	8041534 <HAL_GPIO_Init+0x1e0>
 804150c:	687b      	ldr	r3, [r7, #4]
 804150e:	4a4e      	ldr	r2, [pc, #312]	; (8041648 <HAL_GPIO_Init+0x2f4>)
 8041510:	4293      	cmp	r3, r2
 8041512:	d00d      	beq.n	8041530 <HAL_GPIO_Init+0x1dc>
 8041514:	687b      	ldr	r3, [r7, #4]
 8041516:	4a4d      	ldr	r2, [pc, #308]	; (804164c <HAL_GPIO_Init+0x2f8>)
 8041518:	4293      	cmp	r3, r2
 804151a:	d007      	beq.n	804152c <HAL_GPIO_Init+0x1d8>
 804151c:	687b      	ldr	r3, [r7, #4]
 804151e:	4a4c      	ldr	r2, [pc, #304]	; (8041650 <HAL_GPIO_Init+0x2fc>)
 8041520:	4293      	cmp	r3, r2
 8041522:	d101      	bne.n	8041528 <HAL_GPIO_Init+0x1d4>
 8041524:	2306      	movs	r3, #6
 8041526:	e00c      	b.n	8041542 <HAL_GPIO_Init+0x1ee>
 8041528:	2307      	movs	r3, #7
 804152a:	e00a      	b.n	8041542 <HAL_GPIO_Init+0x1ee>
 804152c:	2305      	movs	r3, #5
 804152e:	e008      	b.n	8041542 <HAL_GPIO_Init+0x1ee>
 8041530:	2304      	movs	r3, #4
 8041532:	e006      	b.n	8041542 <HAL_GPIO_Init+0x1ee>
 8041534:	2303      	movs	r3, #3
 8041536:	e004      	b.n	8041542 <HAL_GPIO_Init+0x1ee>
 8041538:	2302      	movs	r3, #2
 804153a:	e002      	b.n	8041542 <HAL_GPIO_Init+0x1ee>
 804153c:	2301      	movs	r3, #1
 804153e:	e000      	b.n	8041542 <HAL_GPIO_Init+0x1ee>
 8041540:	2300      	movs	r3, #0
 8041542:	697a      	ldr	r2, [r7, #20]
 8041544:	f002 0203 	and.w	r2, r2, #3
 8041548:	00d2      	lsls	r2, r2, #3
 804154a:	4093      	lsls	r3, r2
 804154c:	693a      	ldr	r2, [r7, #16]
 804154e:	4313      	orrs	r3, r2
 8041550:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8041552:	4938      	ldr	r1, [pc, #224]	; (8041634 <HAL_GPIO_Init+0x2e0>)
 8041554:	697b      	ldr	r3, [r7, #20]
 8041556:	089b      	lsrs	r3, r3, #2
 8041558:	3318      	adds	r3, #24
 804155a:	693a      	ldr	r2, [r7, #16]
 804155c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8041560:	4b34      	ldr	r3, [pc, #208]	; (8041634 <HAL_GPIO_Init+0x2e0>)
 8041562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041568:	68fb      	ldr	r3, [r7, #12]
 804156a:	43db      	mvns	r3, r3
 804156c:	693a      	ldr	r2, [r7, #16]
 804156e:	4013      	ands	r3, r2
 8041570:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8041572:	683b      	ldr	r3, [r7, #0]
 8041574:	685b      	ldr	r3, [r3, #4]
 8041576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 804157a:	2b00      	cmp	r3, #0
 804157c:	d003      	beq.n	8041586 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 804157e:	693a      	ldr	r2, [r7, #16]
 8041580:	68fb      	ldr	r3, [r7, #12]
 8041582:	4313      	orrs	r3, r2
 8041584:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8041586:	4a2b      	ldr	r2, [pc, #172]	; (8041634 <HAL_GPIO_Init+0x2e0>)
 8041588:	693b      	ldr	r3, [r7, #16]
 804158a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 804158e:	4b29      	ldr	r3, [pc, #164]	; (8041634 <HAL_GPIO_Init+0x2e0>)
 8041590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041596:	68fb      	ldr	r3, [r7, #12]
 8041598:	43db      	mvns	r3, r3
 804159a:	693a      	ldr	r2, [r7, #16]
 804159c:	4013      	ands	r3, r2
 804159e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80415a0:	683b      	ldr	r3, [r7, #0]
 80415a2:	685b      	ldr	r3, [r3, #4]
 80415a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80415a8:	2b00      	cmp	r3, #0
 80415aa:	d003      	beq.n	80415b4 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 80415ac:	693a      	ldr	r2, [r7, #16]
 80415ae:	68fb      	ldr	r3, [r7, #12]
 80415b0:	4313      	orrs	r3, r2
 80415b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80415b4:	4a1f      	ldr	r2, [pc, #124]	; (8041634 <HAL_GPIO_Init+0x2e0>)
 80415b6:	693b      	ldr	r3, [r7, #16]
 80415b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80415bc:	4b1d      	ldr	r3, [pc, #116]	; (8041634 <HAL_GPIO_Init+0x2e0>)
 80415be:	681b      	ldr	r3, [r3, #0]
 80415c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80415c2:	68fb      	ldr	r3, [r7, #12]
 80415c4:	43db      	mvns	r3, r3
 80415c6:	693a      	ldr	r2, [r7, #16]
 80415c8:	4013      	ands	r3, r2
 80415ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80415cc:	683b      	ldr	r3, [r7, #0]
 80415ce:	685b      	ldr	r3, [r3, #4]
 80415d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80415d4:	2b00      	cmp	r3, #0
 80415d6:	d003      	beq.n	80415e0 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80415d8:	693a      	ldr	r2, [r7, #16]
 80415da:	68fb      	ldr	r3, [r7, #12]
 80415dc:	4313      	orrs	r3, r2
 80415de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80415e0:	4a14      	ldr	r2, [pc, #80]	; (8041634 <HAL_GPIO_Init+0x2e0>)
 80415e2:	693b      	ldr	r3, [r7, #16]
 80415e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80415e6:	4b13      	ldr	r3, [pc, #76]	; (8041634 <HAL_GPIO_Init+0x2e0>)
 80415e8:	685b      	ldr	r3, [r3, #4]
 80415ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80415ec:	68fb      	ldr	r3, [r7, #12]
 80415ee:	43db      	mvns	r3, r3
 80415f0:	693a      	ldr	r2, [r7, #16]
 80415f2:	4013      	ands	r3, r2
 80415f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80415f6:	683b      	ldr	r3, [r7, #0]
 80415f8:	685b      	ldr	r3, [r3, #4]
 80415fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80415fe:	2b00      	cmp	r3, #0
 8041600:	d003      	beq.n	804160a <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8041602:	693a      	ldr	r2, [r7, #16]
 8041604:	68fb      	ldr	r3, [r7, #12]
 8041606:	4313      	orrs	r3, r2
 8041608:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 804160a:	4a0a      	ldr	r2, [pc, #40]	; (8041634 <HAL_GPIO_Init+0x2e0>)
 804160c:	693b      	ldr	r3, [r7, #16]
 804160e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8041610:	697b      	ldr	r3, [r7, #20]
 8041612:	3301      	adds	r3, #1
 8041614:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8041616:	683b      	ldr	r3, [r7, #0]
 8041618:	681a      	ldr	r2, [r3, #0]
 804161a:	697b      	ldr	r3, [r7, #20]
 804161c:	fa22 f303 	lsr.w	r3, r2, r3
 8041620:	2b00      	cmp	r3, #0
 8041622:	f47f ae9f 	bne.w	8041364 <HAL_GPIO_Init+0x10>
  }
}
 8041626:	bf00      	nop
 8041628:	bf00      	nop
 804162a:	371c      	adds	r7, #28
 804162c:	46bd      	mov	sp, r7
 804162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041632:	4770      	bx	lr
 8041634:	4002f400 	.word	0x4002f400
 8041638:	42020000 	.word	0x42020000
 804163c:	42020400 	.word	0x42020400
 8041640:	42020800 	.word	0x42020800
 8041644:	42020c00 	.word	0x42020c00
 8041648:	42021000 	.word	0x42021000
 804164c:	42021400 	.word	0x42021400
 8041650:	42021800 	.word	0x42021800

08041654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8041654:	b480      	push	{r7}
 8041656:	b083      	sub	sp, #12
 8041658:	af00      	add	r7, sp, #0
 804165a:	6078      	str	r0, [r7, #4]
 804165c:	460b      	mov	r3, r1
 804165e:	807b      	strh	r3, [r7, #2]
 8041660:	4613      	mov	r3, r2
 8041662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8041664:	787b      	ldrb	r3, [r7, #1]
 8041666:	2b00      	cmp	r3, #0
 8041668:	d003      	beq.n	8041672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 804166a:	887a      	ldrh	r2, [r7, #2]
 804166c:	687b      	ldr	r3, [r7, #4]
 804166e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8041670:	e002      	b.n	8041678 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8041672:	887a      	ldrh	r2, [r7, #2]
 8041674:	687b      	ldr	r3, [r7, #4]
 8041676:	629a      	str	r2, [r3, #40]	; 0x28
}
 8041678:	bf00      	nop
 804167a:	370c      	adds	r7, #12
 804167c:	46bd      	mov	sp, r7
 804167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041682:	4770      	bx	lr

08041684 <__libc_init_array>:
 8041684:	b570      	push	{r4, r5, r6, lr}
 8041686:	4d0d      	ldr	r5, [pc, #52]	; (80416bc <__libc_init_array+0x38>)
 8041688:	2600      	movs	r6, #0
 804168a:	4c0d      	ldr	r4, [pc, #52]	; (80416c0 <__libc_init_array+0x3c>)
 804168c:	1b64      	subs	r4, r4, r5
 804168e:	10a4      	asrs	r4, r4, #2
 8041690:	42a6      	cmp	r6, r4
 8041692:	d109      	bne.n	80416a8 <__libc_init_array+0x24>
 8041694:	4d0b      	ldr	r5, [pc, #44]	; (80416c4 <__libc_init_array+0x40>)
 8041696:	2600      	movs	r6, #0
 8041698:	4c0b      	ldr	r4, [pc, #44]	; (80416c8 <__libc_init_array+0x44>)
 804169a:	f000 f817 	bl	80416cc <_init>
 804169e:	1b64      	subs	r4, r4, r5
 80416a0:	10a4      	asrs	r4, r4, #2
 80416a2:	42a6      	cmp	r6, r4
 80416a4:	d105      	bne.n	80416b2 <__libc_init_array+0x2e>
 80416a6:	bd70      	pop	{r4, r5, r6, pc}
 80416a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80416ac:	3601      	adds	r6, #1
 80416ae:	4798      	blx	r3
 80416b0:	e7ee      	b.n	8041690 <__libc_init_array+0xc>
 80416b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80416b6:	3601      	adds	r6, #1
 80416b8:	4798      	blx	r3
 80416ba:	e7f2      	b.n	80416a2 <__libc_init_array+0x1e>
 80416bc:	08041768 	.word	0x08041768
 80416c0:	08041768 	.word	0x08041768
 80416c4:	08041768 	.word	0x08041768
 80416c8:	0804176c 	.word	0x0804176c

080416cc <_init>:
 80416cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80416ce:	bf00      	nop
 80416d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80416d2:	bc08      	pop	{r3}
 80416d4:	469e      	mov	lr, r3
 80416d6:	4770      	bx	lr

080416d8 <_fini>:
 80416d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80416da:	bf00      	nop
 80416dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80416de:	bc08      	pop	{r3}
 80416e0:	469e      	mov	lr, r3
 80416e2:	4770      	bx	lr
 80416e4:	0000      	movs	r0, r0
	...

080416e8 <__SECURE_run_attestation_wait_mode_veneer>:
 80416e8:	b401      	push	{r0}
 80416ea:	4802      	ldr	r0, [pc, #8]	; (80416f4 <__SECURE_run_attestation_wait_mode_veneer+0xc>)
 80416ec:	4684      	mov	ip, r0
 80416ee:	bc01      	pop	{r0}
 80416f0:	4760      	bx	ip
 80416f2:	bf00      	nop
 80416f4:	0c03e051 	.word	0x0c03e051

080416f8 <__SECURE_SystemCoreClockUpdate_veneer>:
 80416f8:	b401      	push	{r0}
 80416fa:	4802      	ldr	r0, [pc, #8]	; (8041704 <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 80416fc:	4684      	mov	ip, r0
 80416fe:	bc01      	pop	{r0}
 8041700:	4760      	bx	ip
 8041702:	bf00      	nop
 8041704:	0c03e001 	.word	0x0c03e001

08041708 <__SECURE_log_cond_br_not_taken_veneer>:
 8041708:	b401      	push	{r0}
 804170a:	4802      	ldr	r0, [pc, #8]	; (8041714 <__SECURE_log_cond_br_not_taken_veneer+0xc>)
 804170c:	4684      	mov	ip, r0
 804170e:	bc01      	pop	{r0}
 8041710:	4760      	bx	ip
 8041712:	bf00      	nop
 8041714:	0c03e021 	.word	0x0c03e021

08041718 <__SECURE_RegisterCallback_veneer>:
 8041718:	b401      	push	{r0}
 804171a:	4802      	ldr	r0, [pc, #8]	; (8041724 <__SECURE_RegisterCallback_veneer+0xc>)
 804171c:	4684      	mov	ip, r0
 804171e:	bc01      	pop	{r0}
 8041720:	4760      	bx	ip
 8041722:	bf00      	nop
 8041724:	0c03e049 	.word	0x0c03e049

08041728 <__SECURE_record_output_data_veneer>:
 8041728:	b401      	push	{r0}
 804172a:	4802      	ldr	r0, [pc, #8]	; (8041734 <__SECURE_record_output_data_veneer+0xc>)
 804172c:	4684      	mov	ip, r0
 804172e:	bc01      	pop	{r0}
 8041730:	4760      	bx	ip
 8041732:	bf00      	nop
 8041734:	0c03e011 	.word	0x0c03e011

08041738 <__SECURE_log_indr_fwd_veneer>:
 8041738:	b401      	push	{r0}
 804173a:	4802      	ldr	r0, [pc, #8]	; (8041744 <__SECURE_log_indr_fwd_veneer+0xc>)
 804173c:	4684      	mov	ip, r0
 804173e:	bc01      	pop	{r0}
 8041740:	4760      	bx	ip
 8041742:	bf00      	nop
 8041744:	0c03e019 	.word	0x0c03e019

08041748 <__SECURE_log_ret_veneer>:
 8041748:	b401      	push	{r0}
 804174a:	4802      	ldr	r0, [pc, #8]	; (8041754 <__SECURE_log_ret_veneer+0xc>)
 804174c:	4684      	mov	ip, r0
 804174e:	bc01      	pop	{r0}
 8041750:	4760      	bx	ip
 8041752:	bf00      	nop
 8041754:	0c03e039 	.word	0x0c03e039

08041758 <__SECURE_log_cond_br_taken_veneer>:
 8041758:	b401      	push	{r0}
 804175a:	4802      	ldr	r0, [pc, #8]	; (8041764 <__SECURE_log_cond_br_taken_veneer+0xc>)
 804175c:	4684      	mov	ip, r0
 804175e:	bc01      	pop	{r0}
 8041760:	4760      	bx	ip
 8041762:	bf00      	nop
 8041764:	0c03e041 	.word	0x0c03e041

Disassembly of section .empty:

08060000 <empty>:
#include "empty.h"

__attribute__ ((section (".empty"), naked)) void empty(){
	__asm__ volatile("mov	r0, r0");
 8060000:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060002:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060004:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060006:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060008:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806000a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806000c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806000e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060010:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060012:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060014:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060016:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060018:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806001a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806001c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806001e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060020:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060022:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060024:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060026:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060028:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806002a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806002c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806002e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060030:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060032:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060034:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060036:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060038:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806003a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806003c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806003e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060040:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060042:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060044:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060046:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060048:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806004a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806004c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806004e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060050:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060052:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060054:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060056:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060058:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806005a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806005c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806005e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060060:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060062:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060064:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060066:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060068:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806006a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806006c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806006e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060070:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060072:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060074:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060076:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060078:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806007a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806007c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806007e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060080:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060082:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060084:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060086:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060088:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806008a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806008c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806008e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060090:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060092:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060094:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060096:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060098:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806009a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806009c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806009e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600a0:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600a2:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600a4:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600a6:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600a8:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600aa:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600ac:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600ae:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600b0:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600b2:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600b4:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600b6:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600b8:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600ba:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600bc:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600be:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600c0:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600c2:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600c4:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600c6:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600c8:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600ca:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600cc:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600ce:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600d0:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600d2:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600d4:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600d6:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600d8:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600da:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600dc:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600de:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600e0:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600e2:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600e4:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600e6:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600e8:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600ea:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600ec:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600ee:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600f0:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600f2:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600f4:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600f6:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600f8:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600fa:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600fc:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80600fe:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060100:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060102:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060104:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060106:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060108:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806010a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806010c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806010e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060110:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060112:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060114:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060116:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060118:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806011a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806011c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806011e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060120:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060122:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060124:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060126:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060128:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806012a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806012c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806012e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060130:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060132:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060134:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060136:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060138:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806013a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806013c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806013e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060140:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060142:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060144:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060146:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060148:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806014a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806014c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806014e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060150:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060152:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060154:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060156:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060158:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806015a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806015c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806015e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060160:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060162:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060164:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060166:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060168:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806016a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806016c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806016e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060170:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060172:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060174:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060176:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060178:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806017a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806017c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806017e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060180:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060182:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060184:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060186:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060188:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806018a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806018c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806018e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060190:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060192:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060194:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060196:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 8060198:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806019a:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806019c:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 806019e:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601a0:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601a2:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601a4:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601a6:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601a8:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601aa:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601ac:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601ae:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601b0:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601b2:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601b4:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601b6:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601b8:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601ba:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601bc:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601be:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601c0:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601c2:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601c4:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601c6:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601c8:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601ca:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601cc:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601ce:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601d0:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601d2:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601d4:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601d6:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601d8:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601da:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601dc:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601de:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601e0:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601e2:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601e4:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601e6:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601e8:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601ea:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601ec:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601ee:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601f0:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601f2:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601f4:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601f6:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601f8:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601fa:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601fc:	4600      	mov	r0, r0
	__asm__ volatile("mov	r0, r0");
 80601fe:	4600      	mov	r0, r0
}
 8060200:	bf00      	nop
	...
